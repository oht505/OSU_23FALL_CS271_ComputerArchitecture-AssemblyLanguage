Microsoft (R) Macro Assembler Version 14.29.30152.0	    10/22/23 19:08:44
Project1 Assignmen					     Page 1 - 1


				TITLE Project1 Assignment

				; Author: HyunTaek, Oh 
				; Last Modified: Oct.22, 2023
				; OSU email address: ohhyun@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:       1        Due Date: Oct.22, 2023
				; Description: Display sums and differences of three numbers from user input
				;				by calculating. 
				;				** Extra Credit instructions included
				;				1. Introduce the title of this program and my name
				;				2. Get Three Input Values from user and Store these value into userInputA, userInputB, userinputC 
				;				3. Calculate sums and differences of three values (e.g. A+B, A-B, B+C, B-C, ... , A+B+C)
				;				4. Display these results by restating the process of sums and differences
				;				5. Say goodbye
				;				
				;

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 0000270F			QuitNumber = 9999

 00000000			.data
 00000000 20 20 20 20 20	Intro_1			BYTE	"         Elementary Arithmetic     by HyunTaek, Oh",0
	   20 20 20 20 45
	   6C 65 6D 65 6E
	   74 61 72 79 20
	   41 72 69 74 68
	   6D 65 74 69 63
	   20 20 20 20 20
	   62 79 20 48 79
	   75 6E 54 61 65
	   6B 2C 20 4F 68
	   00
 00000033 2A 2A 45 43 3A	Intro_EC		BYTE	"**EC: Program repeats until the user chooses to quit",13,10,
	   20 50 72 6F 67
	   72 61 6D 20 72
	   65 70 65 61 74
	   73 20 75 6E 74
	   69 6C 20 74 68
	   65 20 75 73 65
	   72 20 63 68 6F
	   6F 73 65 73 20
	   74 6F 20 71 75
	   69 74 0D 0A 2A
	   2A 45 43 3A 20
	   50 72 6F 67 72
	   61 6D 20 63 68
	   65 63 6B 73 20
	   69 66 20 6E 75
	   6D 62 65 72 73
	   20 61 72 65 20
	   69 6E 20 73 74
	   72 69 63 74 6C
	   79 20 64 65 73
	   63 65 6E 64 69
	   6E 67 20 6F 72
	   64 65 72 2E 0D
	   0A 2A 2A 45 43
	   3A 20 50 72 6F
	   67 72 61 6D 20
	   68 61 6E 64 6C
	   65 73 20 6E 65
	   67 61 74 69 76
	   65 20 72 65 73
	   75 6C 74 73 20
	   61 6E 64 20 63
	   6F 6D 70 75 74
	   65 73 20 42 2D
	   41 2C 20 43 2D
	   41 2C 20 43 2D
	   42 2C 20 43 2D
	   42 2D 41 0D 0A
	   2A 2A 45 43 3A
	   20 50 72 6F 67
	   72 61 6D 20 63
	   61 6C 63 75 6C
	   61 74 65 20 61
	   6E 64 20 64 69
	   73 70 6C 61 79
	   20 74 68 65 20
	   71 75 6F 74 69
	   65 6E 74 73 20
	   41 2F 42 2C 20
	   41 2F 43 2C 20
	   42 2F 43 2C 20
	   70 72 69 6E 74
	   69 6E 67 20 74
	   68 65 20 71 75
	   6F 74 69 65 6E
	   74 20 61 6E 64
	   20 72 65 6D 61
	   69 6E 64 65 72
	   00
										"**EC: Program checks if numbers are in strictly descending order.",13,10,
										"**EC: Program handles negative results and computes B-A, C-A, C-B, C-B-A",13,10,
										"**EC: Program calculate and display the quotients A/B, A/C, B/C, printing the quotient and remainder",0
 0000015B 45 6E 74 65 72	Intro_2			BYTE	"Enter 3 numbers A > B > C, and I'll show you the sums and differences.",0
	   20 33 20 6E 75
	   6D 62 65 72 73
	   20 41 20 3E 20
	   42 20 3E 20 43
	   2C 20 61 6E 64
	   20 49 27 6C 6C
	   20 73 68 6F 77
	   20 79 6F 75 20
	   74 68 65 20 73
	   75 6D 73 20 61
	   6E 64 20 64 69
	   66 66 65 72 65
	   6E 63 65 73 2E
	   00
 000001A2 54 79 70 69 6E	Intro_quit		BYTE	"Typing 9999 to quit",0
	   67 20 39 39 39
	   39 20 74 6F 20
	   71 75 69 74 00
 000001B6 46 69 72 73 74	DisplayToGet1	BYTE	"First number: ",0
	   20 6E 75 6D 62
	   65 72 3A 20 00
 000001C5 53 65 63 6F 6E	DisplayToGet2	BYTE	"Second number: ",0
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 000001D5 54 68 69 72 64	DisplayToGet3	BYTE	"Third number: ",0
	   20 6E 75 6D 62
	   65 72 3A 20 00
 000001E4 45 52 52 4F 52	DisplayError	BYTE	"ERROR: The numbers are not in descending order! Try again", 0
	   3A 20 54 68 65
	   20 6E 75 6D 62
	   65 72 73 20 61
	   72 65 20 6E 6F
	   74 20 69 6E 20
	   64 65 73 63 65
	   6E 64 69 6E 67
	   20 6F 72 64 65
	   72 21 20 54 72
	   79 20 61 67 61
	   69 6E 00
 0000021E 00000000		userInputA		DWORD	?
 00000222 00000000		userInputB		DWORD	?
 00000226 00000000		userInputC		DWORD	?
 0000022A 20 2B 20 00		DisplayPlus		BYTE	" + ",0
 0000022E 20 2D 20 00		DisplayMinus	BYTE	" - ",0
 00000232 20 3D 20 00		DisplayEqual	BYTE	" = ",0
 00000236 20 2F 20 00		DisplayDiv		BYTE	" / ",0
 0000023A 20 2E 2E 2E 20	DisplayDot		BYTE	" ... ",0
	   00
 00000240 00000000		sumofAB			DWORD	?
 00000244 00000000		diffofAB		DWORD	?
 00000248 00000000		sumofAC			DWORD	?
 0000024C 00000000		diffofAC		DWORD	?
 00000250 00000000		sumofBC			DWORD	?
 00000254 00000000		diffofBC		DWORD	?
 00000258 00000000		SumAllABC		DWORD	?
 0000025C 00000000		diffofBA		DWORD	?
 00000260 00000000		diffofCA		DWORD	?
 00000264 00000000		diffofCB		DWORD	?
 00000268 00000000		DiffAllCBA		DWORD	?
 0000026C 00000000		divofABQ		DWORD	?
 00000270 00000000		divofACQ		DWORD	?
 00000274 00000000		divofBCQ		DWORD	?
 00000278 00000000		divofABR		DWORD	?
 0000027C 00000000		divofACR		DWORD	?
 00000280 00000000		divofBCR		DWORD	?
 00000284 54 68 61 6E 6B	Goodbye			BYTE	"Thanks for using Elementary Arithmetic!  Goodbye!",0
	   73 20 66 6F 72
	   20 75 73 69 6E
	   67 20 45 6C 65
	   6D 65 6E 74 61
	   72 79 20 41 72
	   69 74 68 6D 65
	   74 69 63 21 20
	   20 47 6F 6F 64
	   62 79 65 21 00


 00000000			.code
 00000000			main PROC
				; ----------------------------------------------------------
				; 1. Display Program Title and my Name as a Introduction
				;		,and show the contents of Extra Credit.
				;		Then, Give a instruction to User to follow 
				;		as well as display the Quit number to quit 
				;
				; ----------------------------------------------------------

				; Title and My Name
 00000000  BA 00000000 R		MOV		EDX, OFFSET Intro_1
 00000005  E8 00000000 E		CALL	WriteString
 0000000A  E8 00000000 E		CALL	Crlf

				; Information about Extra Credit 
 0000000F  BA 00000033 R		MOV		EDX, OFFSET Intro_EC
 00000014  E8 00000000 E		CALL	WriteString
 00000019  E8 00000000 E		CALL	Crlf

				; A Instruction
 0000001E  BA 0000015B R		MOV		EDX, OFFSET Intro_2
 00000023  E8 00000000 E		CALL	WriteString
 00000028  E8 00000000 E		CALL	Crlf

				; Display a message to quit
 0000002D			_DisplayQuit:
 0000002D  E8 00000000 E		CALL	Crlf
 00000032  BA 000001A2 R		MOV		EDX, OFFSET Intro_quit
 00000037  E8 00000000 E		CALL	WriteString
 0000003C  E8 00000000 E		CALL	Crlf

				; ----------------------------------------------------------
				; 2. Get Three Numbers from user, and Check if these numbers
				;		are in strictly descending order. If not, user have to
				;		type the first number again. Then, Check if user input
				;		is eqaul to Quit number(9999) to quit. If not, just 
				;		continue the program. Then, Store these values 
				;		into userInputA, userInputB, and userInputC 
				;		for calculation
				;
				; ----------------------------------------------------------

				; Get First number (userInput A)
 00000041  BA 000001B6 R		MOV		EDX, OFFSET DisplayToGet1
 00000046  E8 00000000 E		CALL	WriteString
 0000004B  E8 00000000 E		CALL	ReadDec
 00000050  3D 0000270F			CMP		EAX, QuitNumber
 00000055  0F 84 00000501		JE		_sayGoodbye
 0000005B  A3 0000021E R		MOV		userInputA, EAX

				; Get Second number (userInput B)
 00000060  BA 000001C5 R		MOV		EDX, OFFSET DisplayToGet2
 00000065  E8 00000000 E		CALL	WriteString
 0000006A  E8 00000000 E		CALL	ReadDec
 0000006F  3D 0000270F			CMP		EAX, QuitNumber
 00000074  0F 84 000004E2		JE		_sayGoodbye
 0000007A  3B 05 0000021E R		CMP		EAX, userInputA
 00000080  0F 8D 000004C2		JGE		_DisplayError
 00000086  A3 00000222 R		MOV		userInputB, EAX

				; Get Third number (userInput C)
 0000008B  BA 000001D5 R		MOV		EDX, OFFSET DisplayToGet3
 00000090  E8 00000000 E		CALL	WriteString
 00000095  E8 00000000 E		CALL	ReadDec
 0000009A  3D 0000270F			CMP		EAX, QuitNumber
 0000009F  0F 84 000004B7		JE		_sayGoodbye
 000000A5  3B 05 00000222 R		CMP		EAX, userInputB
 000000AB  0F 8D 00000497		JGE		_DisplayError
 000000B1  A3 00000226 R		MOV		userInputC, EAX
 000000B6  E8 00000000 E		CALL	Crlf


				; ----------------------------------------------------------
				; 3. Calculate the Sums and Differences in the order which is 
				;		from the Program Description
				;		(A+B, A-B, A+C, A-C, B+C, B-C, A+B+C).

				;		and Store the results into named variables separately.
				;		For example,
				;		"sumofAB" variable stores the result of "A+B" 
				;		"diffofAB" variable stores the result of "A-B" 
				;		"SumAllABC" variable stores the result of "A+B+C" 
				;
				;		**EC: Calculate B-A, C-A, C-B, C-B-A to handle 
				;			   negative results and computes.
				;			   with the same order and style like above
				;		
				;		**EC: Calculate A/B, A/C, B/C and store the results of
				;			  the quotients and remainders into each variable
				;			  with the same order and style like above
				;
				; ----------------------------------------------------------

				; Store A+B into sumofAB
 000000BB  A1 0000021E R		MOV		EAX, userInputA
 000000C0  03 05 00000222 R		ADD		EAX, userInputB
 000000C6  A3 00000240 R		MOV		sumofAB, EAX

				; Store A-B into diffofAB
 000000CB  A1 0000021E R		MOV		EAX, userInputA
 000000D0  2B 05 00000222 R		SUB		EAX, userInputB
 000000D6  A3 00000244 R		MOV		diffofAB, EAX

				; Store A+C into sumofAC
 000000DB  A1 0000021E R		MOV		EAX, userInputA
 000000E0  03 05 00000226 R		ADD		EAX, userInputC
 000000E6  A3 00000248 R		MOV		sumofAC, EAX

				; Store A-C into diffofAC
 000000EB  A1 0000021E R		MOV		EAX, userInputA
 000000F0  2B 05 00000226 R		SUB		EAX, userInputC
 000000F6  A3 0000024C R		MOV		diffofAC, EAX

				; Store B+C into sumofBC
 000000FB  A1 00000222 R		MOV		EAX, userInputB
 00000100  03 05 00000226 R		ADD		EAX, userInputC
 00000106  A3 00000250 R		MOV		sumofBC, EAX

				; Store B-C into diffofBC
 0000010B  A1 00000222 R		MOV		EAX, userInputB
 00000110  2B 05 00000226 R		SUB		EAX, userInputC
 00000116  A3 00000254 R		MOV		diffofBC, EAX

				; Store A+B+C into SumAllABC
 0000011B  A1 0000021E R		MOV		EAX, userInputA
 00000120  03 05 00000222 R		ADD		EAX, userInputB
 00000126  03 05 00000226 R		ADD		EAX, userInputC
 0000012C  A3 00000258 R		MOV		SumAllABC, EAX

				; **EC: Store B-A into diffofBA
 00000131  A1 00000222 R		MOV		EAX, userInputB
 00000136  2B 05 0000021E R		SUB		EAX, userInputA
 0000013C  A3 0000025C R		MOV		diffofBA, EAX

				; **EC: Store C-A into diffofCA
 00000141  A1 00000226 R		MOV		EAX, userInputC
 00000146  2B 05 0000021E R		SUB		EAX, userInputA
 0000014C  A3 00000260 R		MOV		diffofCA, EAX

				; **EC: Store C-B into diffofCB
 00000151  A1 00000226 R		MOV		EAX, userInputC
 00000156  2B 05 00000222 R		SUB		EAX, userInputB
 0000015C  A3 00000264 R		MOV		diffofCB, EAX

				; **EC: Store C-B-A into diffofCBA
 00000161  A1 00000226 R		MOV		EAX, userInputC
 00000166  2B 05 00000222 R		SUB		EAX, userInputB
 0000016C  2B 05 0000021E R		SUB		EAX, userInputA
 00000172  A3 00000268 R		MOV		DiffAllCBA, EAX

				; **EC: Store A/B quotient into divofABQ
 00000177  A1 0000021E R		MOV		EAX, userInputA
 0000017C  8B 1D 00000222 R		MOV		EBX, userInputB
 00000182  BA 00000000			MOV		EDX, 0
 00000187  F7 F3			DIV		EBX
 00000189  A3 0000026C R		MOV		divofABQ, EAX

				; **EC: Store A/B remainder into divofABR
 0000018E  8B C2			MOV		EAX, EDX
 00000190  A3 00000278 R		MOV		divofABR, EAX

				; **EC: Store A/C quotient into divofACQ
 00000195  A1 0000021E R		MOV		EAX, userInputA
 0000019A  8B 1D 00000226 R		MOV		EBX, userInputC
 000001A0  BA 00000000			MOV		EDX, 0
 000001A5  F7 F3			DIV		EBX
 000001A7  A3 00000270 R		MOV		divofACQ, EAX

				; **EC: Store A/C remainder into divofACR
 000001AC  8B C2			MOV		EAX, EDX
 000001AE  A3 0000027C R		MOV		divofACR, EAX

				; **EC: Store B/C quotient into divofBCQ
 000001B3  A1 00000222 R		MOV		EAX, userInputB
 000001B8  8B 1D 00000226 R		MOV		EBX, userInputC
 000001BE  BA 00000000			MOV		EDX, 0
 000001C3  F7 F3			DIV		EBX
 000001C5  A3 00000274 R		MOV		divofBCQ, EAX

				; **EC: Store B/C remainder into divofBCR
 000001CA  8B C2			MOV		EAX, EDX
 000001CC  A3 00000280 R		MOV		divofBCR, EAX

				; ----------------------------------------------------------
				; 4. Display the Addition and Subtraction process 
				;		by using User Inputs, and Show the results of them.
				;
				;		According to Example Execution, 
				;		this section should show the three numbers 
				;		from User Inputs, the operators such as " + ", " = ",
				;		and the results of calculation.
				;		
				;		this part follows the order from Example Execution.
				;		For instance, 
				;		20 + 10 = 30		( A + B )
				;		20 - 10 = 10		( A - B )
				;		20 + 5 = 25			( A + C )
				;		20 - 5 = 15			( A - C )
				;		10 + 5 = 15			( B + C )
				;		10 - 5 = 5			( B - C )
				;		20 + 10 + 5 = 35	( A + B + C )
				;
				;		**EC: Display B-A, C-A, C-B, C-B-A 
				;		**EC: Display A/B, A/C, B/C
				;				with the same order and style 
				;				like Addtion and Subtraction
				;			
				; ----------------------------------------------------------

				; Display "A + B = Sum of A and B"
 000001D1  A1 0000021E R		MOV		EAX, userInputA
 000001D6  E8 00000000 E		CALL	WriteDEC
 000001DB  BA 0000022A R		MOV		EDX, OFFSET DisplayPlus
 000001E0  E8 00000000 E		CALL	WriteString
 000001E5  A1 00000222 R		MOV		EAX, userInputB
 000001EA  E8 00000000 E		CALL	WriteDEC
 000001EF  BA 00000232 R		MOV		EDX, OFFSET	DisplayEqual
 000001F4  E8 00000000 E		CALL	WriteString
 000001F9  A1 00000240 R		MOV		EAX, sumofAB
 000001FE  E8 00000000 E		CALL	WriteDEC
 00000203  E8 00000000 E		CALL	Crlf

				; Display "A - B = Difference of A and B"
 00000208  A1 0000021E R		MOV		EAX, userInputA
 0000020D  E8 00000000 E		CALL	WriteDEC
 00000212  BA 0000022E R		MOV		EDX, OFFSET DisplayMinus
 00000217  E8 00000000 E		CALL	WriteString
 0000021C  A1 00000222 R		MOV		EAX, userInputB
 00000221  E8 00000000 E		CALL	WriteDEC
 00000226  BA 00000232 R		MOV		EDX, OFFSET	DisplayEqual
 0000022B  E8 00000000 E		CALL	WriteString
 00000230  A1 00000244 R		MOV		EAX, diffofAB
 00000235  E8 00000000 E		CALL	WriteDEC
 0000023A  E8 00000000 E		CALL	Crlf

				; Display "A + C = Sum of A and C"
 0000023F  A1 0000021E R		MOV		EAX, userInputA
 00000244  E8 00000000 E		CALL	WriteDEC
 00000249  BA 0000022A R		MOV		EDX, OFFSET DisplayPlus
 0000024E  E8 00000000 E		CALL	WriteString
 00000253  A1 00000226 R		MOV		EAX, userInputC
 00000258  E8 00000000 E		CALL	WriteDEC
 0000025D  BA 00000232 R		MOV		EDX, OFFSET	DisplayEqual
 00000262  E8 00000000 E		CALL	WriteString
 00000267  A1 00000248 R		MOV		EAX, sumofAC
 0000026C  E8 00000000 E		CALL	WriteDEC
 00000271  E8 00000000 E		CALL	Crlf

				; Display "A - C = Difference of A and C"
 00000276  A1 0000021E R		MOV		EAX, userInputA
 0000027B  E8 00000000 E		CALL	WriteDEC
 00000280  BA 0000022E R		MOV		EDX, OFFSET DisplayMinus
 00000285  E8 00000000 E		CALL	WriteString
 0000028A  A1 00000226 R		MOV		EAX, userInputC
 0000028F  E8 00000000 E		CALL	WriteDEC
 00000294  BA 00000232 R		MOV		EDX, OFFSET	DisplayEqual
 00000299  E8 00000000 E		CALL	WriteString
 0000029E  A1 0000024C R		MOV		EAX, diffofAC
 000002A3  E8 00000000 E		CALL	WriteDEC
 000002A8  E8 00000000 E		CALL	Crlf

				; Display "B + C = Sum of B and C"
 000002AD  A1 00000222 R		MOV		EAX, userInputB
 000002B2  E8 00000000 E		CALL	WriteDEC
 000002B7  BA 0000022A R		MOV		EDX, OFFSET DisplayPlus
 000002BC  E8 00000000 E		CALL	WriteString
 000002C1  A1 00000226 R		MOV		EAX, userInputC
 000002C6  E8 00000000 E		CALL	WriteDEC
 000002CB  BA 00000232 R		MOV		EDX, OFFSET	DisplayEqual
 000002D0  E8 00000000 E		CALL	WriteString
 000002D5  A1 00000250 R		MOV		EAX, sumofBC
 000002DA  E8 00000000 E		CALL	WriteDEC
 000002DF  E8 00000000 E		CALL	Crlf

				; Display "B - C = Difference of B and C"
 000002E4  A1 00000222 R		MOV		EAX, userInputB
 000002E9  E8 00000000 E		CALL	WriteDEC
 000002EE  BA 0000022E R		MOV		EDX, OFFSET DisplayMinus
 000002F3  E8 00000000 E		CALL	WriteString
 000002F8  A1 00000226 R		MOV		EAX, userInputC
 000002FD  E8 00000000 E		CALL	WriteDEC
 00000302  BA 00000232 R		MOV		EDX, OFFSET	DisplayEqual
 00000307  E8 00000000 E		CALL	WriteString
 0000030C  A1 00000254 R		MOV		EAX, diffofBC
 00000311  E8 00000000 E		CALL	WriteDEC
 00000316  E8 00000000 E		CALL	Crlf

				; Display "A + B + C = Sum of A,B,and C"
 0000031B  A1 0000021E R		MOV		EAX, userInputA
 00000320  E8 00000000 E		CALL	WriteDEC
 00000325  BA 0000022A R		MOV		EDX, OFFSET DisplayPlus
 0000032A  E8 00000000 E		CALL	WriteString
 0000032F  A1 00000222 R		MOV		EAX, userInputB
 00000334  E8 00000000 E		CALL	WriteDEC
 00000339  BA 0000022A R		MOV		EDX, OFFSET DisplayPlus
 0000033E  E8 00000000 E		CALL	WriteString
 00000343  A1 00000226 R		MOV		EAX, userInputC
 00000348  E8 00000000 E		CALL	WriteDEC
 0000034D  BA 00000232 R		MOV		EDX, OFFSET	DisplayEqual
 00000352  E8 00000000 E		CALL	WriteString
 00000357  A1 00000258 R		MOV		EAX, SumAllABC
 0000035C  E8 00000000 E		CALL	WriteDEC
 00000361  E8 00000000 E		CALL	Crlf
 00000366  E8 00000000 E		CALL	Crlf

				; **EC: Display "B - A = Difference of B and A"
 0000036B  A1 00000222 R		MOV		EAX, userInputB
 00000370  E8 00000000 E		CALL	WriteDEC
 00000375  BA 0000022E R		MOV		EDX, OFFSET DisplayMinus
 0000037A  E8 00000000 E		CALL	WriteString
 0000037F  A1 0000021E R		MOV		EAX, userInputA
 00000384  E8 00000000 E		CALL	WriteDEC
 00000389  BA 00000232 R		MOV		EDX, OFFSET	DisplayEqual
 0000038E  E8 00000000 E		CALL	WriteString
 00000393  A1 0000025C R		MOV		EAX, diffofBA
 00000398  E8 00000000 E		CALL	WriteInt
 0000039D  E8 00000000 E		CALL	Crlf

				; **EC: Display "C - A = Difference of C and A"
 000003A2  A1 00000226 R		MOV		EAX, userInputC
 000003A7  E8 00000000 E		CALL	WriteDEC
 000003AC  BA 0000022E R		MOV		EDX, OFFSET DisplayMinus
 000003B1  E8 00000000 E		CALL	WriteString
 000003B6  A1 0000021E R		MOV		EAX, userInputA
 000003BB  E8 00000000 E		CALL	WriteDEC
 000003C0  BA 00000232 R		MOV		EDX, OFFSET	DisplayEqual
 000003C5  E8 00000000 E		CALL	WriteString
 000003CA  A1 00000260 R		MOV		EAX, diffofCA
 000003CF  E8 00000000 E		CALL	WriteInt
 000003D4  E8 00000000 E		CALL	Crlf

				; **EC: Display "C - B = Difference of C and B"
 000003D9  A1 00000226 R		MOV		EAX, userInputC
 000003DE  E8 00000000 E		CALL	WriteDEC
 000003E3  BA 0000022E R		MOV		EDX, OFFSET DisplayMinus
 000003E8  E8 00000000 E		CALL	WriteString
 000003ED  A1 00000222 R		MOV		EAX, userInputB
 000003F2  E8 00000000 E		CALL	WriteDEC
 000003F7  BA 00000232 R		MOV		EDX, OFFSET	DisplayEqual
 000003FC  E8 00000000 E		CALL	WriteString
 00000401  A1 00000264 R		MOV		EAX, diffofCB
 00000406  E8 00000000 E		CALL	WriteInt
 0000040B  E8 00000000 E		CALL	Crlf

				; **EC: Display "C - B - A = Difference of C,B, and A"
 00000410  A1 00000226 R		MOV		EAX, userInputC
 00000415  E8 00000000 E		CALL	WriteDEC
 0000041A  BA 0000022E R		MOV		EDX, OFFSET DisplayMinus
 0000041F  E8 00000000 E		CALL	WriteString
 00000424  A1 00000222 R		MOV		EAX, userInputB
 00000429  E8 00000000 E		CALL	WriteDEC
 0000042E  BA 0000022E R		MOV		EDX, OFFSET DisplayMinus
 00000433  E8 00000000 E		CALL	WriteString
 00000438  A1 0000021E R		MOV		EAX, userInputA
 0000043D  E8 00000000 E		CALL	WriteDEC
 00000442  BA 00000232 R		MOV		EDX, OFFSET	DisplayEqual
 00000447  E8 00000000 E		CALL	WriteString
 0000044C  A1 00000268 R		MOV		EAX, DiffAllCBA
 00000451  E8 00000000 E		CALL	WriteInt
 00000456  E8 00000000 E		CALL	Crlf
 0000045B  E8 00000000 E		CALL	Crlf

				; Display "A / B = Division of A and B (Quotient ... Remainder)"
 00000460  A1 0000021E R		MOV		EAX, userInputA
 00000465  E8 00000000 E		CALL	WriteDEC
 0000046A  BA 00000236 R		MOV		EDX, OFFSET DisplayDiv
 0000046F  E8 00000000 E		CALL	WriteString
 00000474  A1 00000222 R		MOV		EAX, userInputB
 00000479  E8 00000000 E		CALL	WriteDEC
 0000047E  BA 00000232 R		MOV		EDX, OFFSET	DisplayEqual
 00000483  E8 00000000 E		CALL	WriteString
 00000488  A1 0000026C R		MOV		EAX, divofABQ
 0000048D  E8 00000000 E		CALL	WriteDEC
 00000492  BA 0000023A R		MOV		EDX, OFFSET	DisplayDot
 00000497  E8 00000000 E		CALL	WriteString
 0000049C  A1 00000278 R		MOV		EAX, divofABR
 000004A1  E8 00000000 E		CALL	WriteDEC
 000004A6  E8 00000000 E		CALL	Crlf

				; Display "A / C = Division of A and C (Quotient ... Remainder)"
 000004AB  A1 0000021E R		MOV		EAX, userInputA
 000004B0  E8 00000000 E		CALL	WriteDEC
 000004B5  BA 00000236 R		MOV		EDX, OFFSET DisplayDiv
 000004BA  E8 00000000 E		CALL	WriteString
 000004BF  A1 00000226 R		MOV		EAX, userInputC
 000004C4  E8 00000000 E		CALL	WriteDEC
 000004C9  BA 00000232 R		MOV		EDX, OFFSET	DisplayEqual
 000004CE  E8 00000000 E		CALL	WriteString
 000004D3  A1 00000270 R		MOV		EAX, divofACQ
 000004D8  E8 00000000 E		CALL	WriteDEC
 000004DD  BA 0000023A R		MOV		EDX, OFFSET	DisplayDot
 000004E2  E8 00000000 E		CALL	WriteString
 000004E7  A1 0000027C R		MOV		EAX, divofACR
 000004EC  E8 00000000 E		CALL	WriteDEC
 000004F1  E8 00000000 E		CALL	Crlf

				; Display "B / C = Division of B and C (Quotient ... Remainder)"
 000004F6  A1 00000222 R		MOV		EAX, userInputB
 000004FB  E8 00000000 E		CALL	WriteDEC
 00000500  BA 00000236 R		MOV		EDX, OFFSET DisplayDiv
 00000505  E8 00000000 E		CALL	WriteString
 0000050A  A1 00000226 R		MOV		EAX, userInputC
 0000050F  E8 00000000 E		CALL	WriteDEC
 00000514  BA 00000232 R		MOV		EDX, OFFSET	DisplayEqual
 00000519  E8 00000000 E		CALL	WriteString
 0000051E  A1 00000274 R		MOV		EAX, divofBCQ
 00000523  E8 00000000 E		CALL	WriteDEC
 00000528  BA 0000023A R		MOV		EDX, OFFSET	DisplayDot
 0000052D  E8 00000000 E		CALL	WriteString
 00000532  A1 00000280 R		MOV		EAX, divofBCR
 00000537  E8 00000000 E		CALL	WriteDEC
 0000053C  E8 00000000 E		CALL	Crlf
 00000541  E8 00000000 E		CALL	Crlf

				; Jump over Error message
 00000546  EB 14			JMP		_sayGoodbye

				; Display Error message 
 00000548			_DisplayError:
 00000548  BA 000001E4 R		MOV		EDX, OFFSET DisplayError
 0000054D  E8 00000000 E		CALL	WriteString
 00000552  E8 00000000 E		CALL	Crlf
 00000557  E9 FFFFFAD1			JMP		_DisplayQuit

				; ----------------------------------------------------------
				; 5. If user does type Quit number(9999), end the program
				;		with goodbye by showing this following sentence,
				;		"Thanks for using Elementary Arithmetic!  Goodbye!"
				;		, and Close the program by pushing Enter button
				;    If not, Repeat the program until typing Quit number
				;
				; ----------------------------------------------------------

 0000055C			_sayGoodbye:

				; Check Quit number
 0000055C  3D 0000270F			CMP		EAX, QuitNumber
 00000561  0F 85 FFFFFAC6		JNE		_DisplayQuit
 00000567  E8 00000000 E		CALL	Crlf

				; Display goodbye
 0000056C  BA 00000284 R		MOV		EDX, OFFSET Goodbye
 00000571  E8 00000000 E		CALL	WriteString
 00000576  E8 00000000 E		CALL	Crlf
					
					Invoke ExitProcess,0	; exit to operating system
 0000057B  6A 00	   *	    push   +000000000h
 0000057D  E8 00000000 E   *	    call   ExitProcess
 00000582			main ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30152.0	    10/22/23 19:08:44
Project1 Assignmen					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002B6 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000582 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000582 Public STDCALL
  _DisplayQuit . . . . . . . . .	L Near	 0000002D _TEXT	
  _DisplayError  . . . . . . . .	L Near	 00000548 _TEXT	
  _sayGoodbye  . . . . . . . . .	L Near	 0000055C _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
DiffAllCBA . . . . . . . . . . .	DWord	 00000268 _DATA	
DisplayDiv . . . . . . . . . . .	Byte	 00000236 _DATA	
DisplayDot . . . . . . . . . . .	Byte	 0000023A _DATA	
DisplayEqual . . . . . . . . . .	Byte	 00000232 _DATA	
DisplayError . . . . . . . . . .	Byte	 000001E4 _DATA	
DisplayMinus . . . . . . . . . .	Byte	 0000022E _DATA	
DisplayPlus  . . . . . . . . . .	Byte	 0000022A _DATA	
DisplayToGet1  . . . . . . . . .	Byte	 000001B6 _DATA	
DisplayToGet2  . . . . . . . . .	Byte	 000001C5 _DATA	
DisplayToGet3  . . . . . . . . .	Byte	 000001D5 _DATA	
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
Goodbye  . . . . . . . . . . . .	Byte	 00000284 _DATA	
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
Intro_1  . . . . . . . . . . . .	Byte	 00000000 _DATA	
Intro_2  . . . . . . . . . . . .	Byte	 0000015B _DATA	
Intro_EC . . . . . . . . . . . .	Byte	 00000033 _DATA	
Intro_quit . . . . . . . . . . .	Byte	 000001A2 _DATA	
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
QuitNumber . . . . . . . . . . .	Number	 0000270Fh   
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
SumAllABC  . . . . . . . . . . .	DWord	 00000258 _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
diffofAB . . . . . . . . . . . .	DWord	 00000244 _DATA	
diffofAC . . . . . . . . . . . .	DWord	 0000024C _DATA	
diffofBA . . . . . . . . . . . .	DWord	 0000025C _DATA	
diffofBC . . . . . . . . . . . .	DWord	 00000254 _DATA	
diffofCA . . . . . . . . . . . .	DWord	 00000260 _DATA	
diffofCB . . . . . . . . . . . .	DWord	 00000264 _DATA	
divofABQ . . . . . . . . . . . .	DWord	 0000026C _DATA	
divofABR . . . . . . . . . . . .	DWord	 00000278 _DATA	
divofACQ . . . . . . . . . . . .	DWord	 00000270 _DATA	
divofACR . . . . . . . . . . . .	DWord	 0000027C _DATA	
divofBCQ . . . . . . . . . . . .	DWord	 00000274 _DATA	
divofBCR . . . . . . . . . . . .	DWord	 00000280 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
sumofAB  . . . . . . . . . . . .	DWord	 00000240 _DATA	
sumofAC  . . . . . . . . . . . .	DWord	 00000248 _DATA	
sumofBC  . . . . . . . . . . . .	DWord	 00000250 _DATA	
userInputA . . . . . . . . . . .	DWord	 0000021E _DATA	
userInputB . . . . . . . . . . .	DWord	 00000222 _DATA	
userInputC . . . . . . . . . . .	DWord	 00000226 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
