Microsoft (R) Macro Assembler Version 14.29.30152.0	    11/19/23 20:36:43
#Program Template     (template.asm			     Page 1 - 1


				TITLE Program Template     (template.asm)

				; Author: HyunTaek, Oh
				; Last Modified: Nov. 19, 2023
				; OSU email address: ohhyun@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:        4         Due Date: Nov. 19, 2023
				; Description: Display title, name and instruction. Get a number from user [1-4000] inclusive 
				;				and use it as a counter of the number of prime numbers
				;              Display these prime numbers with empty space (at least 3 digits), and then
				;			   check the number of data in  a line whether it is equal to 10 or not.
				;			   if it is equal to 10, move to next line. Plus, count the number of row when 
				;			   the line moves to next one to print "Press any key to continue ...".
				;			   After that, Display closing comment and name
				;			   

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


 = 00000001			lowerLimit	= 1
 = 00000FA0			upperLimit	= 4000
 = 0000000A			maxColCount	= 10
 = 00000014			maxRowCount	= 20
 = 0000000A			Check2digit	= 10			
 = 00000064			Check3digit	= 100
 = 000003E8			Check4digit	= 1000
 = 00002710			Check5digit	= 10000

 00000000			.data
 00000000 50 72 69 6D 65	Intro			BYTE	"Prime Numbers Programmed by HyunTaek, Oh",0
	   20 4E 75 6D 62
	   65 72 73 20 50
	   72 6F 67 72 61
	   6D 6D 65 64 20
	   62 79 20 48 79
	   75 6E 54 61 65
	   6B 2C 20 4F 68
	   00
 00000029 45 6E 74 65 72	Instruction		BYTE	"Enter the number of prime numbers you would like to see.",10,13,
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   70 72 69 6D 65
	   20 6E 75 6D 62
	   65 72 73 20 79
	   6F 75 20 77 6F
	   75 6C 64 20 6C
	   69 6B 65 20 74
	   6F 20 73 65 65
	   2E 0A 0D 49 27
	   6C 6C 20 61 63
	   63 65 70 74 20
	   6F 72 64 65 72
	   73 20 66 6F 72
	   20 75 70 20 74
	   6F 20 34 30 30
	   30 20 70 72 69
	   6D 65 73 2E 0A
	   0D 20 0A 0D 20
	   2A 2A 20 45 43
	   31 3A 20 41 6C
	   69 67 6E 20 74
	   68 65 20 6F 75
	   74 70 75 74 20
	   63 6F 6C 75 6D
	   6E 73 20 28 74
	   68 65 20 66 69
	   72 73 74 20 64
	   69 67 69 74 20
	   6F 66 20 65 61
	   63 68 20 6E 75
	   6D 62 65 72 20
	   6F 6E 20 61 20
	   72 6F 77 20 73
	   68 6F 75 6C 64
	   20 6D 61 74 63
	   68 20 77 69 74
	   68 20 74 68 65
	   20 72 6F 77 20
	   61 62 6F 76 65
	   29 2E 0A 0D 20
	   2A 2A 20 45 43
	   32 3A 20 45 78
	   74 65 6E 64 20
	   74 68 65 20 72
	   61 6E 67 65 20
	   6F 66 20 70 72
	   69 6D 65 73 20
	   74 6F 20 64 69
	   73 70 6C 61 79
	   20 75 70 20 74
	   6F 20 34 30 30
	   30 20 70 72 69
	   6D 65 73 2E 20
	   73 68 6F 77 6E
	   20 32 30 20 72
	   6F 77 73 20 6F
	   66 20 70 72 69
	   6D 65 73 20 70
	   65 72 20 70 61
	   67 65 2E 00
										"I'll accept orders for up to 4000 primes.",10,13,
										" ", 10,13,
										" ** EC1: Align the output columns (the first digit of each number on a row should match with the row above).", 10,13,
										" ** EC2: Extend the range of primes to display up to 4000 primes. shown 20 rows of primes per page.",0
 00000163 45 6E 74 65 72	msgGetNumber	BYTE	"Enter the number of primes to display [1 ... 4000]: ",0
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   70 72 69 6D 65
	   73 20 74 6F 20
	   64 69 73 70 6C
	   61 79 20 5B 31
	   20 2E 2E 2E 20
	   34 30 30 30 5D
	   3A 20 00
 00000198 4E 6F 20 70 72	InvalidNum		BYTE	"No primes for you! Number out of range. Try again.",0
	   69 6D 65 73 20
	   66 6F 72 20 79
	   6F 75 21 20 4E
	   75 6D 62 65 72
	   20 6F 75 74 20
	   6F 66 20 72 61
	   6E 67 65 2E 20
	   54 72 79 20 61
	   67 61 69 6E 2E
	   00
 000001CB 00000000		userInputN		DWORD	?
 000001CF 00000000		validFlag		DWORD	?
 000001D3 20 20 20 20 20	emptySpace7		BYTE	"       ",0
	   20 20 00
 000001DB 20 20 20 20 20	emptySpace6		BYTE	"      ",0
	   20 00
 000001E2 20 20 20 20 20	emptySpace5		BYTE	"     ",0
	   00
 000001E8 20 20 20 20 00	emptySpace4		BYTE	"    ",0
 000001ED 20 20 20 00		emptySpace3		BYTE	"   ",0
 000001F1 00000000		primeFlag		DWORD	?
 000001F5 00000000		currNum			DWORD	?
 000001F9 00000000		columnCounter	DWORD	?
 000001FD 00000000		rowCounter		DWORD	?
 00000201 50 72 65 73 73	msgContinue		BYTE	"Press any key to continue ...",0
	   20 61 6E 79 20
	   6B 65 79 20 74
	   6F 20 63 6F 6E
	   74 69 6E 75 65
	   20 2E 2E 2E 00
 0000021F 52 65 73 75 6C	Goodbye			BYTE	"Results certified by HyunTaek, Oh. Goodbye. ",0
	   74 73 20 63 65
	   72 74 69 66 69
	   65 64 20 62 79
	   20 48 79 75 6E
	   54 61 65 6B 2C
	   20 4F 68 2E 20
	   47 6F 6F 64 62
	   79 65 2E 20 00

 00000000			.code
				; -------------------------------------------------------------------------------
				;	Name: Main
				;
				;	The main procedure consists of 4 calls: Introduction, getUserData, showPrimes,
				;	and farewell. It starts from Introduction to farewell in a row.
				;
				;---------------------------------------------------------------------------------

 00000000			main PROC

 00000000  E8 00000016			CALL	Introduction
 00000005  E8 0000003A			CALL	getUserData
 0000000A  E8 00000098			CALL	showPrimes
 0000000F  E8 000001C3			CALL	farewell

					Invoke ExitProcess,0	; exit to operating system
 00000014  6A 00	   *	    push   +000000000h
 00000016  E8 00000000 E   *	    call   ExitProcess
 0000001B			main ENDP

				; -------------------------------------------------------------------------------
				;	Name: Introduction
				;
				;	Introduction procedure shows Title and Name first, and then display
				;   instruction and Extra Credit comments.
				;
				;---------------------------------------------------------------------------------

 0000001B			Introduction PROC
				; Introduction - Title
 0000001B  BA 00000000 R		MOV		EDX, OFFSET Intro				; Title and Name			
 00000020  E8 00000000 E		CALL	WriteString
 00000025  E8 00000000 E		CALL	Crlf
 0000002A  E8 00000000 E		CALL	Crlf

				; Introduction - Instruction 
 0000002F  BA 00000029 R		MOV		EDX, OFFSET Instruction			; Instruction & ECs
 00000034  E8 00000000 E		CALL	WriteString
 00000039  E8 00000000 E		CALL	Crlf
 0000003E  E8 00000000 E		CALL	Crlf

 00000043			_end:
 00000043  C3				RET
 00000044			Introduction ENDP

				; -------------------------------------------------------------------------------
				;	Name: getUserData
				;
				;	Get a number from user, which is used for counting the number of prime numbers
				;   a number would be stored into 'userInputN' variable, and then the number will
				;	be checked by validate procedure that the number is in a range(1 ~ 4000)
				;
				;---------------------------------------------------------------------------------
 00000044			getUserData PROC

 00000044			_getNumber:
				; Get number 'n' from users
 00000044  BA 00000163 R		MOV		EDX, OFFSET msgGetNumber		; message for getting a number from user
 00000049  E8 00000000 E		CALL	WriteString

 0000004E  E8 00000000 E		CALL	ReadInt
 00000053  A3 000001CB R		MOV		userInputN, EAX					; Store the number into 'userinputN' variable 

 00000058  E8 0000000F			CALL	validate						; To check the number valid, call validate
 0000005D  83 3D 000001CF R		CMP		validFlag, 0					; If validFlag==0, which means it is not in valid range
	   00
 00000064  74 DE			JE		_getNumber						; Try to get a new number for range

 00000066  E8 00000000 E		CALL	Crlf

 0000006B			_end:
 0000006B  C3				RET

 0000006C			getUserData ENDP

				; -------------------------------------------------------------------------------
				;	Name: validate
				;
				;	Check the user input value valid  [1 <= user input <= 4000]
				;	
				;	Receives: userInputN is how many prime numbers need.
				;
				;	Returns: validFlag is used for checking user input.
				;			 if valifFlag is equal to 1, the number is valid and move next step.
				;			 if not, clear the validFlag to get re-enter the number of primes
				;
				;	** EC2: Extend the range of prime numbers from 200 to 4000. 
				;---------------------------------------------------------------------------------
 0000006C			validate PROC
				; Check the number valid if it is in a range
 0000006C  83 3D 000001CB R		CMP		userInputN, lowerLimit				; Check N < 1
	   01
 00000073  7C 18			JL		_msgError
 00000075  81 3D 000001CB R		CMP		userInputN, upperLimit				; Check N > 4000
	   00000FA0
 0000007F  7F 0C			JG		_msgError

 00000081  C7 05 000001CF R		MOV		validFlag, 1						; If valid, flag = 1
	   00000001
 0000008B  EB 19			JMP		_end								

 0000008D			_msgError:
				; Display error message if it is out of range
 0000008D  BA 00000198 R		MOV		EDX, OFFSET InvalidNum
 00000092  E8 00000000 E		CALL	WriteString
 00000097  E8 00000000 E		CALL	Crlf
					
 0000009C  C7 05 000001CF R		MOV		validFlag, 0						; If not valid, flag = 0
	   00000000

 000000A6			_end:
 000000A6  C3				RET

 000000A7			validate ENDP

				; -------------------------------------------------------------------------------
				;	Name: showPrimes
				;
				;	Get the return boolean value from the "isPrime" procedure, and if the number is 
				;	a prime number, display that number with empty space (from 3~7, depending on digits)
				;	Then, check the number of column values. If the number is equal to 10, move the cursor
				;	from the end of line to next line. Moreover, if the number of rows is equal to 20, 
				;	print a continue message for separating.
				;
				;	Preconditions: if primeFlag is equal to 1, the number is prime, so print it
				;				   if not, skip the process of printing.
				;	
				;	Receives:	Get the return boolean value from isPrime procedure
				;
				;	** EC1: Align the output columns
				;	** EC2: show 20 rows of prime numbers and print "Press any key to continue"
				;---------------------------------------------------------------------------------
 000000A7			showPrimes PROC
				; Display results of prime numbers
 000000A7  8B 0D 000001CB R		MOV		ECX, userInputN				; Use ECX for Loop Count
 000000AD  C7 05 000001F1 R		MOV		primeFlag, 0				; initialize primeflag
	   00000000
 000000B7  C7 05 000001F5 R		MOV		currNum, 1				
	   00000001
 000000C1  C7 05 000001F9 R		MOV		columnCounter, 0			; for counting the number of data in a line
	   00000000
 000000CB  C7 05 000001FD R		MOV		rowCounter, 1				; for counting the number of rows 
	   00000001

 000000D5			_loopForPrime:
 000000D5  FF 05 000001F5 R		INC		currNum						; Start from 2.
 000000DB  E8 000000C3			CALL	isPrime						; to check the value of currNum is Prime number.
 000000E0  83 3D 000001F1 R		CMP		primeFlag, 1				; if it is a prime number, prepare for printing
	   01
 000000E7  74 02			JE		_printPrime

 000000E9  EB EA			JMP		_loopForPrime				; if not, skip the process of printing

 000000EB			_printPrime:
 000000EB  FF 05 000001F9 R		INC		columnCounter				
 000000F1  A1 000001F5 R		MOV		EAX, currNum
 000000F6  E8 00000000 E		CALL	WriteDec

				; **EC1: By using empty spaces, Align the output columns
 000000FB  83 F8 0A			CMP		EAX, Check2digit			; if the number is less than 10, print 7 empty digit spaces
 000000FE  7C 23			JL		_emptySpace7
 00000100  83 F8 64			CMP		EAX, Check3digit			; if the number is less than 100, print 6 empty digit spaces
 00000103  7C 2A			JL		_emptySpace6
 00000105  3D 000003E8			CMP		EAX, Check4digit			; if the number is less than 1000, print 5 empty digit spaces
 0000010A  7C 2F			JL		_emptySpace5
 0000010C  3D 00002710			CMP		EAX, Check5digit			;i f the number is less than 10000, print 4 empty digit spaces
 00000111  7C 34			JL		_emptySpace4

 00000113  EB 3E			JMP		_emptySpace3				; if the number is more than 10000, print 3 empty digit spaces

 00000115			_countContent:
 00000115  A1 000001F9 R		MOV		EAX, columnCounter
 0000011A  83 F8 0A			CMP		EAX, maxColCount			; if data count is equal to 10, move to next line
 0000011D  7D 40			JGE		_jumpLine

 0000011F			_returnForLoop:
 0000011F  E2 B4			LOOP	_loopForPrime				; If the prime number to print left, Loop again.
 00000121  EB 7A			JMP		_end

 00000123			_emptySpace7:
 00000123  BA 000001D3 R		MOV		EDX, OFFSET emptySpace7		; Print 7 digit empty spaces
 00000128  E8 00000000 E		CALL	WriteString
 0000012D  EB E6			JMP		_countContent

 0000012F			_emptySpace6:
 0000012F  BA 000001DB R		MOV		EDX, OFFSET emptySpace6		; Print 6 digit empty spaces
 00000134  E8 00000000 E		CALL	WriteString
 00000139  EB DA			JMP		_countContent

 0000013B			_emptySpace5:
 0000013B  BA 000001E2 R		MOV		EDX, OFFSET emptySpace5		; Print 5 digit empty spaces
 00000140  E8 00000000 E		CALL	WriteString
 00000145  EB CE			JMP		_countContent

 00000147			_emptySpace4:
 00000147  BA 000001E8 R		MOV		EDX, OFFSET emptySpace4		; Print 4 digit empty spaces
 0000014C  E8 00000000 E		CALL	WriteString
 00000151  EB C2			JMP		_countContent

 00000153			_emptySpace3:
 00000153  BA 000001ED R		MOV		EDX, OFFSET emptySpace3		; Print 3 digit empty spaces
 00000158  E8 00000000 E		CALL	WriteString
 0000015D  EB B6			JMP		_countContent	

 0000015F			_jumpLine:
 0000015F  E8 00000000 E		CALL	Crlf
 00000164  C7 05 000001F9 R		MOV		columnCounter, 0			
	   00000000
 0000016E  FF 05 000001FD R		INC		rowCounter					; count the number of row
 00000174  83 3D 000001FD R		CMP		rowCounter, maxRowCount		; if rows are equal to 20, print continue
	   14
 0000017B  7F 02			JG		_printContinue
 0000017D  EB 96			JMP		_countContent

 0000017F			_printContinue:
 0000017F  BA 00000201 R		MOV		EDX, OFFSET msgContinue
 00000184  E8 00000000 E		CALL	WriteString
 00000189  E8 00000000 E		CALL	Crlf
 0000018E  C7 05 000001FD R		MOV		rowCounter, 1				; initialize row counter to 1 if over 20
	   00000001
 00000198  E9 FFFFFF78			JMP		_countContent

 0000019D			_end:
 0000019D  E8 00000000 E		CALL	Crlf
 000001A2  C3				RET
 000001A3			showPrimes ENDP

				; -------------------------------------------------------------------------------
				;	Name: isPrime
				;
				;	Find out prime numbers. Register EBX serves as a divisor increasing from 2 to currNum. 
				;	(currNum is a prime number if it is eligible for having only two factors: 1, 
				;    currNum itself)
				;
				;	Receives: "currNum" is for checking current number.
				;				currNum is global variable, so in each iteration, the value increases
				;				out of this procedure
				;
				;	Returns: "primeFlag" is to check that the current value is prime number.
				;			  if the value is a prime number, set prime flag to 1 
				;			  if not, clear prime flag to 0 
				;---------------------------------------------------------------------------------
 000001A3			isPrime PROC
				; Check a Prime number
 000001A3  BB 00000001			MOV		EBX, 1				; EBX will be a divisor

 000001A8			_checkPrime:
 000001A8  43				INC		EBX
 000001A9  A1 000001F5 R		MOV		EAX, currNum		

				; If the number divided by itself
 000001AE  3B C3			CMP		EAX, EBX			
 000001B0  74 0E			JE		_validPrime

				; For dividing, initialize EDX to 0
 000001B2  BA 00000000			MOV		EDX, 0
 000001B7  F7 F3			DIV		EBX

				; If remainder is 0, it is not prime number
 000001B9  83 FA 00			CMP		EDX, 0				; If EDX == 0 (remainder == 0), the number has other factors except 1 or itself.
 000001BC  74 0E			JE		_invalidPrime		
 000001BE  EB E8			JMP		_checkPrime			; Go up and divide again until reaching the same value of currNum 

 000001C0			_validPrime:
				; if prime number, set flag to 1
 000001C0  C7 05 000001F1 R		MOV		primeFlag, 1
	   00000001
 000001CA  EB 0A			JMP		_end

 000001CC			_invalidPrime:
				; if not prime number, clear flag to 0
 000001CC  C7 05 000001F1 R		MOV		primeFlag, 0
	   00000000

 000001D6			_end:
 000001D6  C3				RET

 000001D7			isPrime ENDP

				; -------------------------------------------------------------------------------
				;	Name: farewell
				;
				;	Display a closing comment and name.
				;
				;---------------------------------------------------------------------------------
 000001D7			farewell PROC
				; Closing comment - goodbye
 000001D7  E8 00000000 E		CALL	Crlf
 000001DC  BA 0000021F R		MOV		EDX, OFFSET Goodbye
 000001E1  E8 00000000 E		CALL	WriteString
 000001E6  E8 00000000 E		CALL	Crlf

 000001EB			_end:
 000001EB  C3				RET
 000001EC			farewell ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30152.0	    11/19/23 20:36:43
#Program Template     (template.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000024C Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001EC Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Introduction . . . . . . . . . .	P Near	 0000001B _TEXT	Length= 00000029 Public STDCALL
  _end . . . . . . . . . . . . .	L Near	 00000043 _TEXT	
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
farewell . . . . . . . . . . . .	P Near	 000001D7 _TEXT	Length= 00000015 Public STDCALL
  _end . . . . . . . . . . . . .	L Near	 000001EB _TEXT	
getUserData  . . . . . . . . . .	P Near	 00000044 _TEXT	Length= 00000028 Public STDCALL
  _getNumber . . . . . . . . . .	L Near	 00000044 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 0000006B _TEXT	
isPrime  . . . . . . . . . . . .	P Near	 000001A3 _TEXT	Length= 00000034 Public STDCALL
  _checkPrime  . . . . . . . . .	L Near	 000001A8 _TEXT	
  _validPrime  . . . . . . . . .	L Near	 000001C0 _TEXT	
  _invalidPrime  . . . . . . . .	L Near	 000001CC _TEXT	
  _end . . . . . . . . . . . . .	L Near	 000001D6 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000001B Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
showPrimes . . . . . . . . . . .	P Near	 000000A7 _TEXT	Length= 000000FC Public STDCALL
  _loopForPrime  . . . . . . . .	L Near	 000000D5 _TEXT	
  _printPrime  . . . . . . . . .	L Near	 000000EB _TEXT	
  _countContent  . . . . . . . .	L Near	 00000115 _TEXT	
  _returnForLoop . . . . . . . .	L Near	 0000011F _TEXT	
  _emptySpace7 . . . . . . . . .	L Near	 00000123 _TEXT	
  _emptySpace6 . . . . . . . . .	L Near	 0000012F _TEXT	
  _emptySpace5 . . . . . . . . .	L Near	 0000013B _TEXT	
  _emptySpace4 . . . . . . . . .	L Near	 00000147 _TEXT	
  _emptySpace3 . . . . . . . . .	L Near	 00000153 _TEXT	
  _jumpLine  . . . . . . . . . .	L Near	 0000015F _TEXT	
  _printContinue . . . . . . . .	L Near	 0000017F _TEXT	
  _end . . . . . . . . . . . . .	L Near	 0000019D _TEXT	
validate . . . . . . . . . . . .	P Near	 0000006C _TEXT	Length= 0000003B Public STDCALL
  _msgError  . . . . . . . . . .	L Near	 0000008D _TEXT	
  _end . . . . . . . . . . . . .	L Near	 000000A6 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
Check2digit  . . . . . . . . . .	Number	 0000000Ah   
Check3digit  . . . . . . . . . .	Number	 00000064h   
Check4digit  . . . . . . . . . .	Number	 000003E8h   
Check5digit  . . . . . . . . . .	Number	 00002710h   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
Goodbye  . . . . . . . . . . . .	Byte	 0000021F _DATA	
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
Instruction  . . . . . . . . . .	Byte	 00000029 _DATA	
Intro  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
InvalidNum . . . . . . . . . . .	Byte	 00000198 _DATA	
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
columnCounter  . . . . . . . . .	DWord	 000001F9 _DATA	
currNum  . . . . . . . . . . . .	DWord	 000001F5 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
emptySpace3  . . . . . . . . . .	Byte	 000001ED _DATA	
emptySpace4  . . . . . . . . . .	Byte	 000001E8 _DATA	
emptySpace5  . . . . . . . . . .	Byte	 000001E2 _DATA	
emptySpace6  . . . . . . . . . .	Byte	 000001DB _DATA	
emptySpace7  . . . . . . . . . .	Byte	 000001D3 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lowerLimit . . . . . . . . . . .	Number	 00000001h   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxColCount  . . . . . . . . . .	Number	 0000000Ah   
maxRowCount  . . . . . . . . . .	Number	 00000014h   
msgContinue  . . . . . . . . . .	Byte	 00000201 _DATA	
msgGetNumber . . . . . . . . . .	Byte	 00000163 _DATA	
primeFlag  . . . . . . . . . . .	DWord	 000001F1 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rowCounter . . . . . . . . . . .	DWord	 000001FD _DATA	
upperLimit . . . . . . . . . . .	Number	 00000FA0h   
userInputN . . . . . . . . . . .	DWord	 000001CB _DATA	
validFlag  . . . . . . . . . . .	DWord	 000001CF _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
