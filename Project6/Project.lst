Microsoft (R) Macro Assembler Version 14.29.30152.0	    12/30/23 00:31:41
2String Primitives & Marcros     (Proj6_ohhyun.asm	     Page 1 - 1


				TITLE String Primitives & Marcros     (Proj6_ohhyun.asm)

				; Author: HyunTaek Oh
				; Last Modified: Dec. 10, 2023
				; OSU email address: ohhyun@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:        6         Due Date: Dec. 10, 2023
				; Description:		1. Get 10 intergers from user 
				;					2. Store the numeric values of them into memory
				;					3. Print the contents of array
				;					4. Display sum
				;					5. Display truncated average

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; ---------------------------------------------------------------------------------
				; Name: mGenerateString
				;
				; Get string value from user. Then, store it into inputBuffer(array)
				;
				; Receives:
				; buffer		= address of message(prompt)
				; inputBuffer	= address of an array 
				; maxInputCount = Max size of buffer
				; inputLength	= Length of user input
				;
				; returns: inputBuffer = generated string address
				; ---------------------------------------------------------------------------------

				mGetString	MACRO	buffer, inputBuffer, maxInputCount, inputLength

					PUSH	EDX
					PUSH	ECX
					PUSH	EAX

					mDisplayString	buffer

					MOV		EDX, inputBuffer		; location to store data
					MOV		ECX, maxInputCount		; max buffer size
					CALL	ReadString
					MOV		inputLength, EAX
					
					POP		EAX
					POP		ECX
					POP		EDX
				ENDM

				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Display string array
				;
				; Receives:
				; buffer		= address of message(prompt)
				;
				; ---------------------------------------------------------------------------------

				mDisplayString	MACRO	buffer

					PUSH	EDX					; Save the previous value of EDX register

					MOV		EDX, buffer
					CALL	WriteString

					POP		EDX					; Restore the previous value of EDX register

				ENDM


				; Constant 
 =-80000000			LO				=	-2147483648
 = 7FFFFFFF			HI				=	2147483647
 = 00000030			ASCII_0			=	48
 = 00000039			ASCII_9			=	57
 = 0000002B			ASCII_pos		=	43
 = 0000002D			ASCII_neg		=	45
 = 00000000			ASCII_enter		=	0
 = 00000020			ASCII_space		=	32
 = 0000000B			maxBuffer		=	11
 = 0000000A			maxNumLength	=	10


 00000000			.data
 00000000 50 52 4F 47 52	Intro1			BYTE	"PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures",13,10,
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   0D 0A 57 72 69
	   74 74 65 6E 20
	   62 79 3A 20 48
	   79 75 6E 54 61
	   65 6B 20 4F 68
	   00
										"Written by: HyunTaek Oh",0
 00000056 50 6C 65 61 73	Intro2			BYTE	"Please provide 10 signed decimal integers.",13,10,
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 0D 0A 45
	   61 63 68 20 6E
	   75 6D 62 65 72
	   20 6E 65 65 64
	   73 20 74 6F 20
	   62 65 20 73 6D
	   61 6C 6C 20 65
	   6E 6F 75 67 68
	   20 74 6F 20 66
	   69 74 20 69 6E
	   73 69 64 65 20
	   61 20 33 32 20
	   62 69 74 20 72
	   65 67 69 73 74
	   65 72 2E 20 41
	   66 74 65 72 20
	   79 6F 75 20 68
	   61 76 65 0D 0A
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 20 6F 66 20
	   74 68 65 20 69
	   6E 74 65 67 65
	   72 73 2C 20 74
	   68 65 69 72 20
	   73 75 6D 2C 20
	   61 6E 64 0D 0A
	   74 68 65 69 72
	   20 61 76 65 72
	   61 67 65 20 76
	   61 6C 75 65 2E
	   00
										"Each number needs to be small enough to fit inside a 32 bit register. After you have",13,10,
										"finished inputting the raw numbers I will display a list of the integers, their sum, and",13,10,
										"their average value.",0
 00000147  0000000A [		inputArray		BYTE	maxNumLength DUP(?)
	    00
	   ]
 00000151  0000000A [		numsArray		SDWORD	maxNumLength DUP(?)
	    00000000
	   ]
 00000179 00000000		userNum			SDWORD	?
 0000017D 00000000		userInputLen	DWORD	?
 00000181 00000000		signCheck		DWORD	?
 00000185  00000001 [		outString		BYTE	1 DUP(?)
	    00
	   ]
 00000186 00000000		sum				SDWORD	?
 0000018A 00000000		avg				SDWORD	?
 0000018E 50 6C 65 61 73	msgGetNum		BYTE	"Please enter a signed number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 000001AD 50 6C 65 61 73	msgTryAgain		BYTE	"Please try again: ",0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00
 000001C0 45 52 52 4F 52	msgError		BYTE	"ERROR: You did not enter a signed number or your number was too big.",0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 00
 00000205 59 6F 75 20 65	msgResultNum	BYTE	"You entered the following numbers: ",0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   00
 00000229 54 68 65 20 73	msgSum			BYTE	"The sum of these numbers is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 00000247 54 68 65 20 74	msgTruncAvg		BYTE	"The truncated average is: ",0
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 00000262 54 68 61 6E 6B	goodbye			BYTE	"Thanks for playing!",0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 00


 00000000			.code
 00000000			main PROC

					mDisplayString	OFFSET Intro1				; Title & Name
 00000000  52		     1		PUSH	EDX					; Save the previous value of EDX register
 00000001  BA 00000000 R     1		MOV		EDX, OFFSET Intro1
 00000006  E8 00000000 E     1		CALL	WriteString
 0000000B  5A		     1		POP		EDX					; Restore the previous value of EDX register
 0000000C  E8 00000000 E		CALL	Crlf
 00000011  E8 00000000 E		CALL	Crlf

					mDisplayString	OFFSET Intro2				; Program introduction
 00000016  52		     1		PUSH	EDX					; Save the previous value of EDX register
 00000017  BA 00000056 R     1		MOV		EDX, OFFSET Intro2
 0000001C  E8 00000000 E     1		CALL	WriteString
 00000021  5A		     1		POP		EDX					; Restore the previous value of EDX register
 00000022  E8 00000000 E		CALL	Crlf
 00000027  E8 00000000 E		CALL	Crlf

 0000002C  B9 0000000A			MOV		ECX, maxNumLength					; loop count for 10 integers 
 00000031  BB 00000000			MOV		EBX, 0								; For managing address

 00000036			_loopforGetNum:									; Get user input 10 times
 00000036  53				PUSH	EBX
 00000037  68 00000181 R		PUSH	OFFSET signCheck
 0000003C  68 0000017D R		PUSH	OFFSET userInputLen	
 00000041  68 00000151 R		PUSH	OFFSET numsArray		
 00000046  68 000001C0 R		PUSH	OFFSET msgError					
 0000004B  68 00000147 R		PUSH	OFFSET inputArray
 00000050  68 0000018E R		PUSH	OFFSET msgGetNum	
 00000055  E8 000000AD			CALL	ReadVal								

 0000005A  83 C3 04			ADD		EBX, 4								; To increase the address of an array that has numeric values
 0000005D  E2 D7			LOOP	_loopforGetNum						; Loops until getting 10 integers

 0000005F			_DisplayNumbers:
 0000005F  E8 00000000 E		CALL	Crlf
					mDisplayString	OFFSET  msgResultNum		
 00000064  52		     1		PUSH	EDX					; Save the previous value of EDX register
 00000065  BA 00000205 R     1		MOV		EDX, OFFSET  msgResultNum
 0000006A  E8 00000000 E     1		CALL	WriteString
 0000006F  5A		     1		POP		EDX					; Restore the previous value of EDX register
 00000070  E8 00000000 E		CALL	Crlf

 00000075  68 00000185 R		PUSH	OFFSET	outString
 0000007A  68 00000151 R		PUSH	OFFSET	numsArray
 0000007F  E8 000001B5			CALL	DisplayNumbers						; Display whole values in numeric array
					
 00000084  E8 00000000 E		CALL	Crlf
 00000089  E8 00000000 E		CALL	Crlf

 0000008E			_Calculate_Display_Sum:
 0000008E  68 00000186 R		PUSH	OFFSET sum
 00000093  68 00000151 R		PUSH	OFFSET numsArray
 00000098  E8 000001C1			CALL	CalculateSum						; Calculate sum of numeric values

					mDisplayString	OFFSET	msgSum
 0000009D  52		     1		PUSH	EDX					; Save the previous value of EDX register
 0000009E  BA 00000229 R     1		MOV		EDX, OFFSET	msgSum
 000000A3  E8 00000000 E     1		CALL	WriteString
 000000A8  5A		     1		POP		EDX					; Restore the previous value of EDX register
 000000A9  68 00000185 R		PUSH	OFFSET outString
 000000AE  FF 35 00000186 R		PUSH	sum
 000000B4  E8 00000112			CALL	WriteVal							; Print sum
 000000B9  E8 00000000 E		CALL	Crlf

 000000BE			_Calculate_Display_Avg:
 000000BE  68 0000018A R		PUSH	OFFSET avg
 000000C3  FF 35 00000186 R		PUSH	sum
 000000C9  E8 000001B8			CALL	CalculateAverage					; Calculate average of whole values in numveric array

					mDisplayString	OFFSET msgTruncAvg			
 000000CE  52		     1		PUSH	EDX					; Save the previous value of EDX register
 000000CF  BA 00000247 R     1		MOV		EDX, OFFSET msgTruncAvg
 000000D4  E8 00000000 E     1		CALL	WriteString
 000000D9  5A		     1		POP		EDX					; Restore the previous value of EDX register
 000000DA  68 00000185 R		PUSH	OFFSET outString
 000000DF  FF 35 0000018A R		PUSH	avg
 000000E5  E8 000000E1			CALL	WriteVal							; Print truncated average

 000000EA  E8 00000000 E		CALL	Crlf
 000000EF  E8 00000000 E		CALL	Crlf

 000000F4			_sayGoodbye:
					mDisplayString	OFFSET goodbye				; Thanks
 000000F4  52		     1		PUSH	EDX					; Save the previous value of EDX register
 000000F5  BA 00000262 R     1		MOV		EDX, OFFSET goodbye
 000000FA  E8 00000000 E     1		CALL	WriteString
 000000FF  5A		     1		POP		EDX					; Restore the previous value of EDX register

					Invoke ExitProcess,0	
 00000100  6A 00	   *	    push   +000000000h
 00000102  E8 00000000 E   *	    call   ExitProcess
 00000107			main ENDP

				; -------------------------------------------------------------------------------------------
				; Name: ReadVal
				;
				; Invoke mGetstring and get integer values from user. Then Convert the value into
				;	numeric one. Store this one value in a memory.
				;
				; Receives:
				;	[EBP+8]		=	Message to get number from user
				;	[EBP+12]	=	Address of input array
				;	[EBP+16]	=	Message to show error
				;	[EBP+20]	=	Address of an array to store numeric values
				;	[EBP+24]	=	Length of user input
				;	[EBP+28]	=	To check negative value
				;	[EBP+32]	=	To increase index
				;
				; Return:
				;	numsArray	= (SWORD) numeric value array 
				;	
				; --------------------------------------------------------------------------------------------
 00000107			ReadVal PROC
 00000107  55				PUSH	EBP
 00000108  8B EC			MOV		EBP, ESP

 0000010A  50				PUSH	EAX
 0000010B  53				PUSH	EBX
 0000010C  51				PUSH	ECX
 0000010D  57				PUSH	EDI
 0000010E  56				PUSH	ESI

 0000010F  BB 00000000			MOV		EBX, 0
 00000114  8B 75 0C			MOV		ESI, [EBP+12]
 00000117  8B 7D 14			MOV		EDI, [EBP+20]
 0000011A  8B 5D 20			MOV		EBX, [EBP+32]
 0000011D  03 FB			ADD		EDI, EBX

 0000011F			_getNumber:
 0000011F  B8 00000000			MOV		EAX, 0
 00000124  89 06			MOV		[ESI], EAX

					mGetString	[EBP+8], [EBP+12], maxBuffer, [EBP+24]
 00000126  52		     1		PUSH	EDX
 00000127  51		     1		PUSH	ECX
 00000128  50		     1		PUSH	EAX
 00000129  52		     2		PUSH	EDX					; Save the previous value of EDX register
 0000012A  8B 55 08	     2		MOV		EDX, [EBP+8]
 0000012D  E8 00000000 E     2		CALL	WriteString
 00000132  5A		     2		POP		EDX					; Restore the previous value of EDX register
 00000133  8B 55 0C	     1		MOV		EDX, [EBP+12]		; location to store data
 00000136  B9 0000000B	     1		MOV		ECX, maxBuffer		; max buffer size
 0000013B  E8 00000000 E     1		CALL	ReadString
 00000140  89 45 18	     1		MOV		[EBP+24], EAX
 00000143  58		     1		POP		EAX
 00000144  59		     1		POP		ECX
 00000145  5A		     1		POP		EDX

 00000146  8B 4D 18			MOV		ECX, [EBP+24]
 00000149  BB 00000000			MOV		EBX, 0
 0000014E  89 5D 1C			MOV		[EBP+28], EBX			; Reset negative Checker

 00000151			_check_sign:
 00000151  AC				LODSB
 00000152  3C 2B			CMP		AL, ASCII_pos
 00000154  74 13			JE		_posSign
 00000156  3C 2D			CMP		AL, ASCII_neg
 00000158  74 02			JE		_negSign
 0000015A  EB 12			JMP		_checkValid

 0000015C			_negSign:
 0000015C  53				PUSH	EBX
 0000015D  BB 00000001			MOV		EBX, 1
 00000162  89 5D 1C			MOV		[EBP+28], EBX
 00000165  5B				POP		EBX
 00000166  49				DEC		ECX
 00000167  EB 01			JMP		_forward

 00000169			_posSign:
 00000169  49				DEC		ECX

 0000016A			_forward:
 0000016A  FC				CLD
 0000016B  AC				LODSB
 0000016C  EB 00			JMP		_checkValid

 0000016E			_checkValid:
 0000016E  3C 00			CMP		AL, ASCII_enter
 00000170  74 0E			JE		_invalid
 00000172  3C 20			CMP		AL, ASCII_space
 00000174  74 0A			JE		_invalid
 00000176  3C 30			CMP		AL, ASCII_0
 00000178  7C 06			JL		_invalid
 0000017A  3C 39			CMP		AL, ASCII_9
 0000017C  7F 02			JG		_invalid
 0000017E  EB 19			JMP		_accumulate

 00000180			_invalid:
					mDisplayString	[EBP+16]
 00000180  52		     1		PUSH	EDX					; Save the previous value of EDX register
 00000181  8B 55 10	     1		MOV		EDX, [EBP+16]
 00000184  E8 00000000 E     1		CALL	WriteString
 00000189  5A		     1		POP		EDX					; Restore the previous value of EDX register
 0000018A  E8 00000000 E		CALL	Crlf
 0000018F  59				POP		ECX
 00000190  BB 00000000			MOV		EBX, 0
 00000195  89 1F			MOV		[EDI], EBX
 00000197  EB 86			JMP		_getNumber

 00000199			_accumulate:
 00000199  8B 1F			MOV		EBX, [EDI]

 0000019B  50				PUSH	EAX
 0000019C  53				PUSH	EBX
 0000019D  8B C3			MOV		EAX, EBX
 0000019F  BB 0000000A			MOV		EBX, 10
 000001A4  F7 E3			MUL		EBX
 000001A6  89 07			MOV		[EDI], EAX
 000001A8  5B				POP		EBX
 000001A9  58				POP		EAX

 000001AA  2C 30			SUB		AL, ASCII_0
 000001AC  00 07			ADD		[EDI], AL

 000001AE  E2 BA			LOOP	_forward

 000001B0  50				PUSH	EAX
 000001B1  8B 45 1C			MOV		EAX, [EBP+28]
 000001B4  83 F8 01			CMP		EAX, 1
 000001B7  74 02			JE		_negate
 000001B9  EB 06			JMP		_end

 000001BB			_negate:
 000001BB  8B 07			MOV		EAX, [EDI]
 000001BD  F7 D8			NEG		EAX
 000001BF  89 07			MOV		[EDI], EAX

 000001C1			_end:
 000001C1  58				POP		EAX
 000001C2  5E				POP		ESI
 000001C3  5F				POP		EDI
 000001C4  59				POP		ECX
 000001C5  5B				POP		EBX
 000001C6  58				POP		EAX
 000001C7  5D				POP		EBP
 000001C8  C2 001C			RET		28

 000001CB			ReadVal ENDP

				;---------------------------------------------------------------------------------------------
				; name: WriteVal 
				;
				; Displays previous string values ( numeric integers -> string integers )
				;
				; Postconditions:	outString will be modified
				;
				; Receives: 		
				;	[EBP+8]		=	numsArray	
				;	[EBP+12]	=	outString address
				;
				;----------------------------------------------------------------------------------------------
 000001CB			WriteVal PROC
 000001CB  55				PUSH	EBP
 000001CC  8B EC			MOV		EBP, ESP

 000001CE  50				PUSH	EAX
 000001CF  53				PUSH	EBX
 000001D0  51				PUSH	ECX
 000001D1  57				PUSH	EDI
 000001D2  52				PUSH	EDX

 000001D3  8B 7D 0C			MOV		EDI, [EBP + 12]			; outString address
 000001D6  8B 45 08			MOV		EAX, [EBP + 8]			; number to write to outString

 000001D9			_checkSign:
 000001D9  83 F8 00			CMP		EAX, 0
 000001DC  7C 03			JL		_negate
 000001DE  EB 13			JMP		_pushNullBit
 000001E0  FC				CLD

 000001E1			_negate:
 000001E1  50				PUSH	EAX
 000001E2  B0 2D			MOV		AL, 45
 000001E4  AA				STOSB	
					mDisplayString	[EBP + 12]
 000001E5  52		     1		PUSH	EDX					; Save the previous value of EDX register
 000001E6  8B 55 0C	     1		MOV		EDX, [EBP + 12]
 000001E9  E8 00000000 E     1		CALL	WriteString
 000001EE  5A		     1		POP		EDX					; Restore the previous value of EDX register

 000001EF  4F				DEC		EDI					; Move back to beginning of string (address)
						
 000001F0  58				POP		EAX
 000001F1  F7 D8			NEG		EAX					; convert to positive int

 000001F3			_pushNullBit:
 000001F3  6A 00			PUSH	0

 000001F5			_asciiConversion:

 000001F5  BA 00000000			MOV		EDX, 0
 000001FA  BB 0000000A			MOV		EBX, 10
 000001FF  F7 F3			DIV		EBX
						
 00000201  8B CA			MOV		ECX, EDX
 00000203  83 C1 30			ADD		ECX, 48
 00000206  51				PUSH	ECX
 00000207  83 F8 00			CMP		EAX, 0
 0000020A  74 02			JE		_popAndPrint
 0000020C  EB E7			JMP		_asciiConversion

 0000020E			_popAndPrint:
 0000020E  58				POP		EAX

 0000020F  AA				STOSB
					mDisplayString	[EBP + 12]
 00000210  52		     1		PUSH	EDX					; Save the previous value of EDX register
 00000211  8B 55 0C	     1		MOV		EDX, [EBP + 12]
 00000214  E8 00000000 E     1		CALL	WriteString
 00000219  5A		     1		POP		EDX					; Restore the previous value of EDX register
 0000021A  4F				DEC		EDI				; Move back to display again

 0000021B  83 F8 00			CMP		EAX, 0
 0000021E  74 02			JE		_exitAsciiConversion
 00000220  EB EC			JMP		_popAndPrint

 00000222			_exitAsciiConversion:
 00000222  B0 20			MOV		AL, ASCII_space
 00000224  AA				STOSB
					mDisplayString	[EBP + 12]
 00000225  52		     1		PUSH	EDX					; Save the previous value of EDX register
 00000226  8B 55 0C	     1		MOV		EDX, [EBP + 12]
 00000229  E8 00000000 E     1		CALL	WriteString
 0000022E  5A		     1		POP		EDX					; Restore the previous value of EDX register
 0000022F  4F				DEC		EDI				; Move back to reset for next use 
					
 00000230  5A				POP		EDX
 00000231  5F				POP		EDI
 00000232  59				POP		ECX
 00000233  5B				POP		EBX
 00000234  58				POP		EAX
 00000235  5D				POP		EBP

 00000236  C2 0008			RET		8

 00000239			WriteVal ENDP

				;---------------------------------------------------------------------------------------------
				; name: DisplayNumbers
				;
				; By using loops, Find SDWORD numbers array and Call WriteVal to display these numbers
				;
				; Precondition:		SDWORD array should be filled.
				;
				; Receives: 		
				;	[EBP+8]		=	numsArray	
				;	[EBP+12]	=	outString address
				;
				;----------------------------------------------------------------------------------------------
 00000239			DisplayNumbers PROC
 00000239  55				PUSH	EBP
 0000023A  8B EC			MOV		EBP, ESP

 0000023C  56				PUSH	ESI
 0000023D  57				PUSH	EDI
 0000023E  51				PUSH	ECX

 0000023F  8B 75 08			MOV		ESI, [EBP + 8]			; numeric array
 00000242  8B 7D 0C			MOV		EDI, [EBP + 12]			; outString
 00000245  B9 0000000A			MOV		ECX, maxNumLength

 0000024A			_printNumber:
 0000024A  57				PUSH	EDI
 0000024B  FF 36			PUSH	[ESI]
 0000024D  E8 FFFFFF79			CALL	WriteVal
 00000252  83 C6 04			ADD		ESI, 4
 00000255  E2 F3			LOOP	_printNumber

 00000257			_end:
 00000257  59				POP		ECX
 00000258  5F				POP		EDI
 00000259  5E				POP		ESI
 0000025A  5D				POP		EBP	
 0000025B  C2 0008			RET		8

 0000025E			DisplayNumbers ENDP

				;---------------------------------------------------------------------------------------------
				; name: CalculateSum
				;
				; For the calculation of sum
				;
				; Precondition:		SDWORD array should be filled.
				;
				; Receives: 		
				;	[EBP+8]		=	numsArray	
				;	[EBP+12]	=	sum
				;
				; Returns:
				;	sum			=	the result of sum
				;
				;----------------------------------------------------------------------------------------------
 0000025E			CalculateSum PROC
 0000025E  55				PUSH	EBP
 0000025F  8B EC			MOV		EBP, ESP

 00000261  56				PUSH	ESI
 00000262  50				PUSH	EAX
 00000263  53				PUSH	EBX
 00000264  51				PUSH	ECX

 00000265  8B 75 08			MOV		ESI, [EBP + 8]			; numeric array
 00000268  B9 0000000A			MOV		ECX, maxNumLength

 0000026D  B8 00000000			MOV		EAX, 0

 00000272			_sumNumbers:
 00000272  03 06			ADD		EAX, [ESI]
 00000274  83 C6 04			ADD		ESI, 4
 00000277  E2 F9			LOOP	_sumNumbers

 00000279  8B 5D 0C			MOV		EBX, [EBP + 12]
 0000027C  89 03			MOV		[EBX], EAX

 0000027E			_end:
 0000027E  59				POP		ECX
 0000027F  5B				POP		EBX
 00000280  58				POP		EAX
 00000281  5E				POP		ESI
 00000282  5D				POP		EBP
					
 00000283  C2 0008			RET		8

 00000286			CalculateSum ENDP

				;---------------------------------------------------------------------------------------------
				; name: CalculateAverage
				;
				; For the calculation of average
				;
				; Precondition:		sum should have a value
				;
				; Receives: 		
				;	[EBP+8]		=	sum	
				;	[EBP+12]	=	avg
				;
				; Returns:
				;	avg			=	the result of average
				;
				;----------------------------------------------------------------------------------------------
 00000286			CalculateAverage PROC
 00000286  55				PUSH	EBP
 00000287  8B EC			MOV		EBP, ESP
 00000289  51				PUSH	ECX
 0000028A  50				PUSH	EAX
 0000028B  53				PUSH	EBX

 0000028C  B9 0000000A			MOV		ECX, maxNumLength
 00000291  8B 45 08			MOV		EAX, [EBP + 8]					
					
 00000294			_divide:
 00000294  BB 0000000A			MOV		EBX, maxNumLength
 00000299  BA 00000000			MOV		EDX, 0
 0000029E  99				CDQ
 0000029F  F7 FB			IDIV	EBX

 000002A1  8B 5D 0C			MOV		EBX, [EBP + 12]					
 000002A4  89 03			MOV		[EBX], EAX

 000002A6			_end:
 000002A6  5B				POP		EBX
 000002A7  58				POP		EAX
 000002A8  59				POP		ECX
 000002A9  5D				POP		EBP

 000002AA  C2 0008			RET		8

 000002AD			CalculateAverage ENDP


				END main

Microsoft (R) Macro Assembler Version 14.29.30152.0	    12/30/23 00:31:41
2String Primitives & Marcros     (Proj6_ohhyun.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000276 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002AD Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CalculateAverage . . . . . . . .	P Near	 00000286 _TEXT	Length= 00000027 Public STDCALL
  _divide  . . . . . . . . . . .	L Near	 00000294 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 000002A6 _TEXT	
CalculateSum . . . . . . . . . .	P Near	 0000025E _TEXT	Length= 00000028 Public STDCALL
  _sumNumbers  . . . . . . . . .	L Near	 00000272 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 0000027E _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplayNumbers . . . . . . . . .	P Near	 00000239 _TEXT	Length= 00000025 Public STDCALL
  _printNumber . . . . . . . . .	L Near	 0000024A _TEXT	
  _end . . . . . . . . . . . . .	L Near	 00000257 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000107 _TEXT	Length= 000000C4 Public STDCALL
  _getNumber . . . . . . . . . .	L Near	 0000011F _TEXT	
  _check_sign  . . . . . . . . .	L Near	 00000151 _TEXT	
  _negSign . . . . . . . . . . .	L Near	 0000015C _TEXT	
  _posSign . . . . . . . . . . .	L Near	 00000169 _TEXT	
  _forward . . . . . . . . . . .	L Near	 0000016A _TEXT	
  _checkValid  . . . . . . . . .	L Near	 0000016E _TEXT	
  _invalid . . . . . . . . . . .	L Near	 00000180 _TEXT	
  _accumulate  . . . . . . . . .	L Near	 00000199 _TEXT	
  _negate  . . . . . . . . . . .	L Near	 000001BB _TEXT	
  _end . . . . . . . . . . . . .	L Near	 000001C1 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000001CB _TEXT	Length= 0000006E Public STDCALL
  _checkSign . . . . . . . . . .	L Near	 000001D9 _TEXT	
  _negate  . . . . . . . . . . .	L Near	 000001E1 _TEXT	
  _pushNullBit . . . . . . . . .	L Near	 000001F3 _TEXT	
  _asciiConversion . . . . . . .	L Near	 000001F5 _TEXT	
  _popAndPrint . . . . . . . . .	L Near	 0000020E _TEXT	
  _exitAsciiConversion . . . . .	L Near	 00000222 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000107 Public STDCALL
  _loopforGetNum . . . . . . . .	L Near	 00000036 _TEXT	
  _DisplayNumbers  . . . . . . .	L Near	 0000005F _TEXT	
  _Calculate_Display_Sum . . . .	L Near	 0000008E _TEXT	
  _Calculate_Display_Avg . . . .	L Near	 000000BE _TEXT	
  _sayGoodbye  . . . . . . . . .	L Near	 000000F4 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ASCII_0  . . . . . . . . . . . .	Number	 00000030h   
ASCII_9  . . . . . . . . . . . .	Number	 00000039h   
ASCII_enter  . . . . . . . . . .	Number	 00000000h   
ASCII_neg  . . . . . . . . . . .	Number	 0000002Dh   
ASCII_pos  . . . . . . . . . . .	Number	 0000002Bh   
ASCII_space  . . . . . . . . . .	Number	 00000020h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 7FFFFFFFh   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
Intro1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
Intro2 . . . . . . . . . . . . .	Byte	 00000056 _DATA	
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 -80000000h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avg  . . . . . . . . . . . . . .	DWord	 0000018A _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 00000262 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputArray . . . . . . . . . . .	Byte	 00000147 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxBuffer  . . . . . . . . . . .	Number	 0000000Bh   
maxNumLength . . . . . . . . . .	Number	 0000000Ah   
msgError . . . . . . . . . . . .	Byte	 000001C0 _DATA	
msgGetNum  . . . . . . . . . . .	Byte	 0000018E _DATA	
msgResultNum . . . . . . . . . .	Byte	 00000205 _DATA	
msgSum . . . . . . . . . . . . .	Byte	 00000229 _DATA	
msgTruncAvg  . . . . . . . . . .	Byte	 00000247 _DATA	
msgTryAgain  . . . . . . . . . .	Byte	 000001AD _DATA	
numsArray  . . . . . . . . . . .	DWord	 00000151 _DATA	
outString  . . . . . . . . . . .	Byte	 00000185 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
signCheck  . . . . . . . . . . .	DWord	 00000181 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 00000186 _DATA	
userInputLen . . . . . . . . . .	DWord	 0000017D _DATA	
userNum  . . . . . . . . . . . .	DWord	 00000179 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
