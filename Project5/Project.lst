Microsoft (R) Macro Assembler Version 14.29.30152.0	    11/26/23 20:29:07
<Arrays, Addressing, & Stack-Passed Params    (Proj5_ohhyun.  Page 1 - 1


				TITLE Arrays, Addressing, & Stack-Passed Params    (Proj5_ohhyun.asm)

				; Author: HyunTaek Oh
				; Last Modified: Nov. 26
				; OSU email address: ohhyun@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:       5          Due Date: Nov. 26, 2023
				; Description:  1.Introduce the program and programmer name 
				;				2. Generate an array holding random values
				;               3. Display the array to show random values
				;				4. Sort the array in non-decreasing order (smallest first)
				;				5. Display the whole elements of sorted array 
				;				6. Display the median value of sorted array
				;				7. Generate an array for counting same values in previous array
				;				8. Display the counts of the array
				;				9. Show a closing comment (good bye) 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 000000C8			ARRAYSIZE	=	200
 = 0000000F			LO			=	15
 = 00000032			HI			=	50

 00000000			.data
 00000000 47 65 6E 65 72	intro1			BYTE	"Generating, Sorting, and Counting Random integers!					 Programmed by HyunTaek Oh",0
	   61 74 69 6E 67
	   2C 20 53 6F 72
	   74 69 6E 67 2C
	   20 61 6E 64 20
	   43 6F 75 6E 74
	   69 6E 67 20 52
	   61 6E 64 6F 6D
	   20 69 6E 74 65
	   67 65 72 73 21
	   09 09 09 09 09
	   20 50 72 6F 67
	   72 61 6D 6D 65
	   64 20 62 79 20
	   48 79 75 6E 54
	   61 65 6B 20 4F
	   68 00
 00000052 54 68 69 73 20	intro2			BYTE	"This program generates 200 random integers between 15 and 50, inclusive.",13,10,
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 32 30
	   30 20 72 61 6E
	   64 6F 6D 20 69
	   6E 74 65 67 65
	   72 73 20 62 65
	   74 77 65 65 6E
	   20 31 35 20 61
	   6E 64 20 35 30
	   2C 20 69 6E 63
	   6C 75 73 69 76
	   65 2E 0D 0A 49
	   74 20 74 68 65
	   6E 20 64 69 73
	   70 6C 61 79 73
	   20 74 68 65 20
	   6F 72 69 67 69
	   6E 61 6C 20 6C
	   69 73 74 2C 20
	   73 6F 72 74 73
	   20 74 68 65 20
	   6C 69 73 74 2C
	   20 64 69 73 70
	   6C 61 79 73 20
	   74 68 65 20 6D
	   65 64 69 61 6E
	   20 76 61 6C 75
	   65 20 6F 66 20
	   74 68 65 20 6C
	   69 73 74 2C 20
	   0D 0A 64 69 73
	   70 6C 61 79 73
	   20 74 68 65 20
	   6C 69 73 74 20
	   73 6F 72 74 65
	   64 20 69 6E 20
	   61 73 63 65 6E
	   64 69 6E 67 20
	   6F 72 64 65 72
	   2C 20 61 6E 64
	   20 66 69 6E 61
	   6C 6C 79 20 64
	   69 73 70 6C 61
	   79 73 20 74 68
	   65 20 6E 75 6D
	   62 65 72 20 6F
	   66 20 69 6E 73
	   74 61 6E 63 65
	   73 0D 0A 6F 66
	   20 65 61 63 68
	   20 67 65 6E 65
	   72 61 74 65 64
	   20 76 61 6C 75
	   65 2C 20 73 74
	   61 72 74 69 6E
	   67 20 77 69 74
	   68 20 74 68 65
	   20 6E 75 6D 62
	   65 72 20 6F 66
	   20 6C 6F 77 65
	   73 74 2E 00
										"It then displays the original list, sorts the list, displays the median value of the list, ",13,10,
										"displays the list sorted in ascending order, and finally displays the number of instances",13,10,
										"of each generated value, starting with the number of lowest.",0
 00000191 59 6F 75 72 20	UnsortedTitle	BYTE	"Your unsorted random numbers: ",0
	   75 6E 73 6F 72
	   74 65 64 20 72
	   61 6E 64 6F 6D
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   00
 000001B0  000000C8 [		randArray		DWORD	ARRAYSIZE DUP(?)
	    00000000
	   ]
 000004D0 000000C8		arrayLength		DWORD	LENGTHOF randArray
 000004D4 54 68 65 20 6D	MedianTitle		BYTE	"The median value of the array: ",0
	   65 64 69 61 6E
	   20 76 61 6C 75
	   65 20 6F 66 20
	   74 68 65 20 61
	   72 72 61 79 3A
	   20 00
 000004F4 59 6F 75 72 20	SortedTitle		BYTE	"Your sorted random numbers: ",0
	   73 6F 72 74 65
	   64 20 72 61 6E
	   64 6F 6D 20 6E
	   75 6D 62 65 72
	   73 3A 20 00
 00000511 59 6F 75 72 20	CountTitle		BYTE	"Your list of instances of each generated number, starting with the smallest value: ",0
	   6C 69 73 74 20
	   6F 66 20 69 6E
	   73 74 61 6E 63
	   65 73 20 6F 66
	   20 65 61 63 68
	   20 67 65 6E 65
	   72 61 74 65 64
	   20 6E 75 6D 62
	   65 72 2C 20 73
	   74 61 72 74 69
	   6E 67 20 77 69
	   74 68 20 74 68
	   65 20 73 6D 61
	   6C 6C 65 73 74
	   20 76 61 6C 75
	   65 3A 20 00
 00000565  000000C8 [		countArray		DWORD	ARRAYSIZE DUP(?)
	    00000000
	   ]
 00000885 000000C8		countLength		DWORD	LENGTHOF countArray
 00000889 47 6F 6F 64 62	goodbye			BYTE	"Goodbye, and thanks for using my program! ",0
	   79 65 2C 20 61
	   6E 64 20 74 68
	   61 6E 6B 73 20
	   66 6F 72 20 75
	   73 69 6E 67 20
	   6D 79 20 70 72
	   6F 67 72 61 6D
	   21 20 00


 00000000			.code
 00000000			main PROC

 00000000  E8 00000000 E		CALL	Randomize				; Generate a random seed.

 00000005  68 00000000 R		PUSH	OFFSET intro1			
 0000000A  68 00000052 R		PUSH	OFFSET intro2					
 0000000F  E8 00000087			CALL	introduction

 00000014  68 000001B0 R		PUSH	OFFSET randArray		; address of an array being filled by random values
 00000019  E8 000000A8			CALL	fillArray				; Filling an array with random values within boundaries

 0000001E  FF 35 000004D0 R		PUSH	arrayLength				
 00000024  68 000001B0 R		PUSH	OFFSET randArray
 00000029  68 00000191 R		PUSH	OFFSET UnsortedTitle	
 0000002E  E8 00000176			CALL	displayList				; Display the array

 00000033  68 000001B0 R		PUSH	OFFSET randArray
 00000038  E8 000000B8			CALL	sortList				; Sorting the array

 0000003D  FF 35 000004D0 R		PUSH	arrayLength
 00000043  68 000001B0 R		PUSH	OFFSET randArray
 00000048  68 000004F4 R		PUSH	OFFSET SortedTitle
 0000004D  E8 00000157			CALL	displayList

 00000052  68 000001B0 R		PUSH	OFFSET randArray
 00000057  68 000004D4 R		PUSH	OFFSET MedianTitle	
 0000005C  E8 000000E8			CALL	displayMedian			; Show the median value of the array

 00000061  68 00000565 R		PUSH	OFFSET countArray
 00000066  68 000001B0 R		PUSH	OFFSET randArray
 0000006B  E8 000001A2			CALL	countList				; Generate a new counter array 

 00000070  FF 35 00000885 R		PUSH	countLength
 00000076  68 00000565 R		PUSH	OFFSET countArray
 0000007B  68 00000511 R		PUSH	OFFSET CountTitle
 00000080  E8 00000124			CALL	displayList

 00000085  BA 00000889 R		MOV		EDX, OFFSET	goodbye		; Display closing comment (No requirement about goodbye message)
 0000008A  E8 00000000 E		CALL	WriteString
 0000008F  E8 00000000 E		CALL	Crlf

					Invoke ExitProcess,0	
 00000094  6A 00	   *	    push   +000000000h
 00000096  E8 00000000 E   *	    call   ExitProcess
 0000009B			main ENDP


				; ---------------------------------------------------------------------------------
				; Name: Introduction
				;
				; Display Title, Name, and Instruction
				;
				; Receives:
				; 
				;	[EBP+12]	=	Title & Name
				;	[EBP+8]		=	Instruction message
				;
				; ---------------------------------------------------------------------------------
 0000009B			introduction PROC
 0000009B  55				PUSH	EBP
 0000009C  8B EC			MOV		EBP, ESP
					
 0000009E  8B 55 0C			MOV		EDX, [EBP+12]			; Title & Name
 000000A1  E8 00000000 E		CALL	WriteString
 000000A6  E8 00000000 E		CALL	Crlf
 000000AB  E8 00000000 E		CALL	Crlf

 000000B0  8B 55 08			MOV		EDX, [EBP+8]			; Instruction
 000000B3  E8 00000000 E		CALL	WriteString
 000000B8  E8 00000000 E		CALL	Crlf
 000000BD  E8 00000000 E		CALL	Crlf
 000000C2			_end:
 000000C2  5D				POP		EBP
 000000C3  C2 0008			RET		8

 000000C6			introduction ENDP


				; ---------------------------------------------------------------------------------
				; Name: fillArray
				;
				; Fill 200 random values [15-50] into an array. 
				;
				; Receives:
				;	[EBP+8]		=	address of array
				;	
				; returns: randArray	=	it has random positive values
				; ---------------------------------------------------------------------------------
 000000C6			fillArray PROC
 000000C6  55				PUSH	EBP
 000000C7  8B EC			MOV		EBP, ESP

 000000C9  53				PUSH	EBX
 000000CA  51				PUSH	ECX
 000000CB  57				PUSH	EDI

 000000CC  BB 00000000			MOV		EBX, 0
 000000D1  B9 000000C8			MOV		ECX, ARRAYSIZE				; loop counts (200)
 000000D6  8B 7D 08			MOV		EDI, [EBP+8]				; address of array

 000000D9			_fillLoop:
 000000D9  B8 00000032			MOV		EAX, HI
 000000DE  E8 00000000 E		CALL	RandomRange					; Generate random values into EAX register

 000000E3  83 F8 0F			CMP		EAX, LO						; Check the value is not lower than the boundary
 000000E6  7C F1			JL		_fillLoop

 000000E8  89 04 9F			MOV		[EDI+EBX*4], EAX			; Put the data into array in every 4 bytes
 000000EB  43				INC		EBX
 000000EC  E2 EB			LOOP	_fillLoop

 000000EE			_end:
 000000EE  5F				POP		EDI
 000000EF  59				POP		ECX
 000000F0  5B				POP		EBX
 000000F1  5D				POP		EBP
 000000F2  C2 0004			RET		4

 000000F5			fillArray ENDP


				; ---------------------------------------------------------------------------------
				; Name: sortList
				;
				; By using bubble sort, the elements of the array will become in non-decreasing order 
				;
				; Preconditions: the array contains only positive values
				;
				; Postconditions: none.
				;
				; Receives:
				;	[EBP+8]		=	address of array
				;
				; returns: randArray	=	Unlike previous one, it is sorted 
				; ---------------------------------------------------------------------------------
 000000F5			sortList PROC
 000000F5  55				PUSH	EBP
 000000F6  8B EC			MOV		EBP, ESP

 000000F8  53				PUSH	EBX
 000000F9  57				PUSH	EDI

 000000FA  B9 000000C7			MOV		ECX, ARRAYSIZE-1			; Loop counts should decrease 1 because of out of index

 000000FF  8B 7D 08			MOV		EDI, [EBP+8]

 00000102			_outLoop:
 00000102  51				PUSH	ECX							; Save loop counts for outer loop
 00000103  BB 00000000			MOV		EBX, 0						; EBX will be used for moving every 4bytes address forward.
 00000108			_innerLoop:
 00000108  8B 04 9F			MOV		EAX, [EDI+EBX*4]
 0000010B  43				INC		EBX
 0000010C  3B 04 9F			CMP		EAX, [EDI+EBX*4]			; Compare the two contiguous values 
 0000010F  7F 07			JG		_exchangeValue				; if the value violates non-decreasing order, exchange it

 00000111			_afterChange:
 00000111  E2 F5			LOOP	_innerLoop

 00000113  59				POP		ECX
 00000114  E2 EC			LOOP	_outLoop
 00000116  EB 09			JMP		_end

 00000118			_exchangeValue:
 00000118  57				PUSH	EDI							; address of array
 00000119  53				PUSH	EBX							; Index heving the value to be changed 
 0000011A  E8 00000008			CALL	exchangeElements
 0000011F  EB F0			JMP		_afterChange

 00000121			_end:
 00000121  5F				POP		EDI
 00000122  5B				POP		EBX
 00000123  5D				POP		EBP
 00000124  C2 0004			RET		4

 00000127			sortList ENDP


				; ---------------------------------------------------------------------------------
				; Name: exchangeElements
				;
				; Swap the contiguous elements of array		( randArray[i] <=> randArray[i+4] )
				;	By using EAX and ECX register 
				;
				; Preconditions: the elements should violate the rule in non-decreasing order
				;
				; Receives:
				;	[EBP+8]		=	index of the elements to be changed
				;	[EBP+12]	=	address of array
				; 
				; returns: randArray = the array having exchanged elements
				; ---------------------------------------------------------------------------------
 00000127			exchangeElements PROC
 00000127  55				PUSH	EBP
 00000128  8B EC			MOV		EBP, ESP

 0000012A  50				PUSH	EAX
 0000012B  53				PUSH	EBX
 0000012C  51				PUSH	ECX
					
 0000012D  8B 5D 08			MOV		EBX, [EBP+8]			; Use index
 00000130  8B 7D 0C			MOV		EDI, [EBP+12]			; Address of array

 00000133  8B 04 9F			MOV		EAX, [EDI+EBX*4]		
 00000136  4B				DEC		EBX
 00000137  8B 0C 9F			MOV		ECX, [EDI+EBX*4]

 0000013A  43				INC		EBX
 0000013B  89 0C 9F			MOV		[EDI+EBX*4], ECX
 0000013E  4B				DEC		EBX
 0000013F  89 04 9F			MOV		[EDI+EBX*4], EAX

 00000142			_end:
 00000142  59				POP		ECX
 00000143  5B				POP		EBX
 00000144  58				POP		EAX
 00000145  5D				POP		EBP
 00000146  C2 0008			RET		8

 00000149			exchangeElements ENDP

				; ---------------------------------------------------------------------------------
				; Name: displayMedian
				;
				; Display the median value of "sorted" array. 
				;	if the length of array is odd, use half of it as an index
				;	if even, find two middle elements and calculate by using round-half up.
				;		e.g. 50 => (randArray[23] + randArray[24]) / 2  
				;	Then, print the median value
				;
				; Preconditions: the array need to be sorted
				;
				; Receives:
				;	[EBP+8]		=	Title of median value
				;	[EBP+12]	=	address of array
				;
				; ---------------------------------------------------------------------------------
 00000149			displayMedian PROC
 00000149  55				PUSH	EBP
 0000014A  8B EC			MOV		EBP, ESP

 0000014C  50				PUSH	EAX
 0000014D  53				PUSH	EBX
 0000014E  52				PUSH	EDX
 0000014F  56				PUSH	ESI

 00000150  B8 000000C8			MOV		EAX, ARRAYSIZE
 00000155  BB 00000002			MOV		EBX, 2					; Divisor (2)
 0000015A  8B 55 08			MOV		EDX, [EBP+8]			; Median value title
 0000015D  E8 00000000 E		CALL	WriteString

 00000162  8B 75 0C			MOV		ESI, [EBP+12]			; Address of array

 00000165  BA 00000000			MOV		EDX, 0
 0000016A  F7 F3			DIV		EBX

 0000016C  83 FA 00			CMP		EDX, 0					; If remainder is 0, it means the number is even.
 0000016F  74 05			JE		_evenCal
					
 00000171  8B 04 86			MOV		EAX, [ESI+EAX*4]		; The value is odd, use it as an index and print.
 00000174  EB 1C			JMP		_print

 00000176			_evenCal:
 00000176  53				PUSH	EBX
 00000177  8B 14 86			MOV		EDX, [ESI+EAX*4]		; Store the value which has the middle index
 0000017A  48				DEC		EAX
 0000017B  8B 1C 86			MOV		EBX, [ESI+EAX*4]		; Store the value which has the another middle index. 
 0000017E  8B C2			MOV		EAX, EDX
 00000180  03 C3			ADD		EAX, EBX
					
 00000182  5B				POP		EBX
 00000183  BA 00000000			MOV		EDX,0
 00000188  F7 F3			DIV		EBX
					
 0000018A  83 FA 01			CMP		EDX, 1					; If remainder is 1, it will become round up
 0000018D  74 02			JE		_roundUp
 0000018F  EB 01			JMP		_print

 00000191			_roundUp:
 00000191  40				INC		EAX
					
 00000192			_print:
 00000192  E8 00000000 E		CALL	WriteDec
 00000197  E8 00000000 E		CALL	Crlf

 0000019C			_end:
 0000019C  E8 00000000 E		CALL	Crlf
 000001A1  5E				POP		ESI
 000001A2  5A				POP		EDX
 000001A3  5B				POP		EBX
 000001A4  58				POP		EAX
 000001A5  5D				POP		EBP
 000001A6  C2 0008			RET		8

 000001A9			displayMedian ENDP

				; ---------------------------------------------------------------------------------
				; Name: displayList
				;
				; Calculate and Display the elements of the array 
				;	(20 numbers per a line with one space between each values)
				;	if the elements have '0' value, ignore loops, and end this procedure
				;
				; Receives:
				;	[EBP+8]		=	Title
				;	[EBP+12]	=	address of array
				;	[EBP+16]	=	loop counters (Array length)
				;
				; ---------------------------------------------------------------------------------
 000001A9			displayList PROC
 000001A9  55				PUSH	EBP
 000001AA  8B EC			MOV		EBP, ESP

 000001AC  52				PUSH	EDX
 000001AD  53				PUSH	EBX
 000001AE  51				PUSH	ECX
 000001AF  56				PUSH	ESI

 000001B0  8B 55 08			MOV		EDX, [EBP+8]				; Display Title 
 000001B3  E8 00000000 E		CALL	WriteString
 000001B8  E8 00000000 E		CALL	Crlf

 000001BD  BB 00000000			MOV		EBX, 0						; Initialize EBX to 0

 000001C2  8B 4D 10			MOV		ECX, [EBP+16]				; the number of Loops for displaying (length)

 000001C5  8B 75 0C			MOV		ESI, [EBP+12]				; address of the array


 000001C8			_columnLoop:
 000001C8  8B 04 9E			MOV		EAX, [ESI+EBX*4]

 000001CB  83 F8 00			CMP		EAX, 0						; Check the value is '0'
 000001CE  74 30			JE		_end

 000001D0  E8 00000000 E		CALL	WriteDec					
 000001D5  B0 20			MOV		AL, 32						; For one empty space
 000001D7  E8 00000000 E		CALL	WriteChar

 000001DC  43				INC		EBX
					
 000001DD  8B C3			MOV		EAX, EBX
 000001DF  53				PUSH	EBX
 000001E0  BB 00000014			MOV		EBX, 20						; Divide the number with 20 for checking remainder

 000001E5  BA 00000000			MOV		EDX, 0
 000001EA  F7 F3			DIV		EBX

 000001EC  5B				POP		EBX

 000001ED  83 F9 01			CMP		ECX, 1						; If it is the last loop, end this procedure
 000001F0  7E 0E			JLE		_end

 000001F2  83 FA 00			CMP		EDX, 0						; If remainder is 0, it means 20 numbers are displayed
 000001F5  74 02			JE		_rowLoop		

 000001F7  E2 CF			LOOP	_columnLoop

 000001F9			_rowLoop:
 000001F9  E8 00000000 E		CALL	Crlf						; Change a line if 20 numbers are displayed
 000001FE  E2 C8			LOOP	_columnLoop
					
 00000200			_end:
 00000200  E8 00000000 E		CALL	Crlf
 00000205  E8 00000000 E		CALL	Crlf
 0000020A  5E				POP		ESI
 0000020B  59				POP		ECX
 0000020C  5B				POP		EBX
 0000020D  5A				POP		EDX
 0000020E  5D				POP		EBP
 0000020F  C2 000C			RET		12

 00000212			displayList ENDP

				; ---------------------------------------------------------------------------------
				; Name: countList
				;
				; Check every elements in target array (randArray),
				;	Count how many same numbers are there, and store these values into countArray.
				;	(Holding one value and move foward to check whether the next value is same or not)
				;
				; Preconditions: Target array is needed (randArray)
				;
				; Receives:
				;	[EBP+8]		=	address of target array to check and count same numbers
				;	[EBP+12]	=	address of array to store the counts of target array
				;
				; returns: countArray = an array consists of the counts of elements in target array
				;
				; ---------------------------------------------------------------------------------
 00000212			countList PROC
 00000212  55				PUSH	EBP
 00000213  8B EC			MOV		EBP, ESP

 00000215  60				PUSHAD

 00000216  BB 00000001			MOV		EBX, 1
 0000021B  B9 000000C8			MOV		ECX, ARRAYSIZE
 00000220  8B 75 08			MOV		ESI, [EBP+8]			; Target Array having sorted random values 
 00000223  8B 7D 0C			MOV		EDI, [EBP+12]			; Count Array to store the counts of the elements in Target Array

 00000226			_countLoop:
 00000226  8B 06			MOV		EAX, [ESI]
 00000228  83 C6 04			ADD		ESI, 4
 0000022B  3B 06			CMP		EAX, [ESI]
 0000022D  75 05			JNE		_storeCount				; If contiguous elements are different, store it into array
 0000022F  43				INC		EBX
 00000230			_continue:
 00000230  E2 F4			LOOP	_countLoop
 00000232  EB 0C			JMP		_end

 00000234			_storeCount:
 00000234  89 1F			MOV		[EDI], EBX
 00000236  83 C7 04			ADD		EDI, 4	
 00000239  BB 00000001			MOV		EBX, 1
 0000023E  EB F0			JMP		_continue
					
 00000240			_end:
 00000240  61				POPAD
 00000241  5D				POP		EBP
 00000242  C2 0008			RET		8

 00000245			countList ENDP


				END main
Microsoft (R) Macro Assembler Version 14.29.30152.0	    11/26/23 20:29:07
<Arrays, Addressing, & Stack-Passed Params    (Proj5_ohhyun.  Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000008B4 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000245 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
countList  . . . . . . . . . . .	P Near	 00000212 _TEXT	Length= 00000033 Public STDCALL
  _countLoop . . . . . . . . . .	L Near	 00000226 _TEXT	
  _continue  . . . . . . . . . .	L Near	 00000230 _TEXT	
  _storeCount  . . . . . . . . .	L Near	 00000234 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 00000240 _TEXT	
displayList  . . . . . . . . . .	P Near	 000001A9 _TEXT	Length= 00000069 Public STDCALL
  _columnLoop  . . . . . . . . .	L Near	 000001C8 _TEXT	
  _rowLoop . . . . . . . . . . .	L Near	 000001F9 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 00000200 _TEXT	
displayMedian  . . . . . . . . .	P Near	 00000149 _TEXT	Length= 00000060 Public STDCALL
  _evenCal . . . . . . . . . . .	L Near	 00000176 _TEXT	
  _roundUp . . . . . . . . . . .	L Near	 00000191 _TEXT	
  _print . . . . . . . . . . . .	L Near	 00000192 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 0000019C _TEXT	
exchangeElements . . . . . . . .	P Near	 00000127 _TEXT	Length= 00000022 Public STDCALL
  _end . . . . . . . . . . . . .	L Near	 00000142 _TEXT	
fillArray  . . . . . . . . . . .	P Near	 000000C6 _TEXT	Length= 0000002F Public STDCALL
  _fillLoop  . . . . . . . . . .	L Near	 000000D9 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 000000EE _TEXT	
introduction . . . . . . . . . .	P Near	 0000009B _TEXT	Length= 0000002B Public STDCALL
  _end . . . . . . . . . . . . .	L Near	 000000C2 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000009B Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 000000F5 _TEXT	Length= 00000032 Public STDCALL
  _outLoop . . . . . . . . . . .	L Near	 00000102 _TEXT	
  _innerLoop . . . . . . . . . .	L Near	 00000108 _TEXT	
  _afterChange . . . . . . . . .	L Near	 00000111 _TEXT	
  _exchangeValue . . . . . . . .	L Near	 00000118 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 00000121 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 000000C8h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CountTitle . . . . . . . . . . .	Byte	 00000511 _DATA	
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 00000032h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 0000000Fh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MedianTitle  . . . . . . . . . .	Byte	 000004D4 _DATA	
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
SortedTitle  . . . . . . . . . .	Byte	 000004F4 _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UnsortedTitle  . . . . . . . . .	Byte	 00000191 _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrayLength  . . . . . . . . . .	DWord	 000004D0 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
countArray . . . . . . . . . . .	DWord	 00000565 _DATA	
countLength  . . . . . . . . . .	DWord	 00000885 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 00000889 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 00000052 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
randArray  . . . . . . . . . . .	DWord	 000001B0 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
